/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      EquipmentClass: EquipmentClassObject
      EquipmentClassProperty: EquipmentClassPropertyObject
      Equipment: EquipmentObject
      EquipmentProperty: EquipmentPropertyObject
      EquipmentClassConnection: EquipmentClassConnectionObject
      PageInfo: PageInfoObject
      EquipmentClassEdge: EquipmentClassEdgeObject
      AggregateEquipmentClass: AggregateEquipmentClassObject
      EquipmentClassPropertyConnection: EquipmentClassPropertyConnectionObject
      EquipmentClassPropertyEdge: EquipmentClassPropertyEdgeObject
      AggregateEquipmentClassProperty: AggregateEquipmentClassPropertyObject
      EquipmentConnection: EquipmentConnectionObject
      EquipmentEdge: EquipmentEdgeObject
      AggregateEquipment: AggregateEquipmentObject
      EquipmentPropertyConnection: EquipmentPropertyConnectionObject
      EquipmentPropertyEdge: EquipmentPropertyEdgeObject
      AggregateEquipmentProperty: AggregateEquipmentPropertyObject
      EquipmentClassMapping: EquipmentClassMappingObject
      EquipmentClassMappingConnection: EquipmentClassMappingConnectionObject
      EquipmentClassMappingEdge: EquipmentClassMappingEdgeObject
      AggregateEquipmentClassMapping: AggregateEquipmentClassMappingObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      EquipmentClassSubscriptionPayload: EquipmentClassSubscriptionPayloadObject
      EquipmentClassPreviousValues: EquipmentClassPreviousValuesObject
      EquipmentClassPropertySubscriptionPayload: EquipmentClassPropertySubscriptionPayloadObject
      EquipmentClassPropertyPreviousValues: EquipmentClassPropertyPreviousValuesObject
      EquipmentSubscriptionPayload: EquipmentSubscriptionPayloadObject
      EquipmentPreviousValues: EquipmentPreviousValuesObject
      EquipmentPropertySubscriptionPayload: EquipmentPropertySubscriptionPayloadObject
      EquipmentPropertyPreviousValues: EquipmentPropertyPreviousValuesObject
      EquipmentClassMappingSubscriptionPayload: EquipmentClassMappingSubscriptionPayloadObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      EquipmentClass: EquipmentClassFieldDetails
      EquipmentClassProperty: EquipmentClassPropertyFieldDetails
      Equipment: EquipmentFieldDetails
      EquipmentProperty: EquipmentPropertyFieldDetails
      EquipmentClassConnection: EquipmentClassConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      EquipmentClassEdge: EquipmentClassEdgeFieldDetails
      AggregateEquipmentClass: AggregateEquipmentClassFieldDetails
      EquipmentClassPropertyConnection: EquipmentClassPropertyConnectionFieldDetails
      EquipmentClassPropertyEdge: EquipmentClassPropertyEdgeFieldDetails
      AggregateEquipmentClassProperty: AggregateEquipmentClassPropertyFieldDetails
      EquipmentConnection: EquipmentConnectionFieldDetails
      EquipmentEdge: EquipmentEdgeFieldDetails
      AggregateEquipment: AggregateEquipmentFieldDetails
      EquipmentPropertyConnection: EquipmentPropertyConnectionFieldDetails
      EquipmentPropertyEdge: EquipmentPropertyEdgeFieldDetails
      AggregateEquipmentProperty: AggregateEquipmentPropertyFieldDetails
      EquipmentClassMapping: EquipmentClassMappingFieldDetails
      EquipmentClassMappingConnection: EquipmentClassMappingConnectionFieldDetails
      EquipmentClassMappingEdge: EquipmentClassMappingEdgeFieldDetails
      AggregateEquipmentClassMapping: AggregateEquipmentClassMappingFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      EquipmentClassSubscriptionPayload: EquipmentClassSubscriptionPayloadFieldDetails
      EquipmentClassPreviousValues: EquipmentClassPreviousValuesFieldDetails
      EquipmentClassPropertySubscriptionPayload: EquipmentClassPropertySubscriptionPayloadFieldDetails
      EquipmentClassPropertyPreviousValues: EquipmentClassPropertyPreviousValuesFieldDetails
      EquipmentSubscriptionPayload: EquipmentSubscriptionPayloadFieldDetails
      EquipmentPreviousValues: EquipmentPreviousValuesFieldDetails
      EquipmentPropertySubscriptionPayload: EquipmentPropertySubscriptionPayloadFieldDetails
      EquipmentPropertyPreviousValues: EquipmentPropertyPreviousValuesFieldDetails
      EquipmentClassMappingSubscriptionPayload: EquipmentClassMappingSubscriptionPayloadFieldDetails
    }
  }
  inputTypes: {
    fields: {
      EquipmentClassWhereUniqueInput: EquipmentClassWhereUniqueInputInputObject
      EquipmentClassPropertyWhereInput: EquipmentClassPropertyWhereInputInputObject
      EquipmentClassWhereInput: EquipmentClassWhereInputInputObject
      EquipmentWhereInput: EquipmentWhereInputInputObject
      EquipmentPropertyWhereInput: EquipmentPropertyWhereInputInputObject
      EquipmentClassPropertyWhereUniqueInput: EquipmentClassPropertyWhereUniqueInputInputObject
      EquipmentWhereUniqueInput: EquipmentWhereUniqueInputInputObject
      EquipmentPropertyWhereUniqueInput: EquipmentPropertyWhereUniqueInputInputObject
      EquipmentClassMappingWhereInput: EquipmentClassMappingWhereInputInputObject
      EquipmentClassCreateInput: EquipmentClassCreateInputInputObject
      EquipmentClassPropertyCreateManyWithoutEquipmentClassInput: EquipmentClassPropertyCreateManyWithoutEquipmentClassInputInputObject
      EquipmentClassPropertyCreateWithoutEquipmentClassInput: EquipmentClassPropertyCreateWithoutEquipmentClassInputInputObject
      EquipmentClassPropertyCreateOneWithoutChildrenInput: EquipmentClassPropertyCreateOneWithoutChildrenInputInputObject
      EquipmentClassPropertyCreateWithoutChildrenInput: EquipmentClassPropertyCreateWithoutChildrenInputInputObject
      EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput: EquipmentClassCreateOneWithoutEquipmentClassPropertiesInputInputObject
      EquipmentClassCreateWithoutEquipmentClassPropertiesInput: EquipmentClassCreateWithoutEquipmentClassPropertiesInputInputObject
      EquipmentCreateManyWithoutEquipmentClassesInput: EquipmentCreateManyWithoutEquipmentClassesInputInputObject
      EquipmentCreateWithoutEquipmentClassesInput: EquipmentCreateWithoutEquipmentClassesInputInputObject
      EquipmentPropertyCreateManyWithoutEquipmentInput: EquipmentPropertyCreateManyWithoutEquipmentInputInputObject
      EquipmentPropertyCreateWithoutEquipmentInput: EquipmentPropertyCreateWithoutEquipmentInputInputObject
      EquipmentPropertyCreateOneWithoutChildrenInput: EquipmentPropertyCreateOneWithoutChildrenInputInputObject
      EquipmentPropertyCreateWithoutChildrenInput: EquipmentPropertyCreateWithoutChildrenInputInputObject
      EquipmentCreateOneWithoutEquipmentPropertiesInput: EquipmentCreateOneWithoutEquipmentPropertiesInputInputObject
      EquipmentCreateWithoutEquipmentPropertiesInput: EquipmentCreateWithoutEquipmentPropertiesInputInputObject
      EquipmentClassCreateManyWithoutEquipmentsInput: EquipmentClassCreateManyWithoutEquipmentsInputInputObject
      EquipmentClassCreateWithoutEquipmentsInput: EquipmentClassCreateWithoutEquipmentsInputInputObject
      EquipmentClassCreateOneWithoutChildrenInput: EquipmentClassCreateOneWithoutChildrenInputInputObject
      EquipmentClassCreateWithoutChildrenInput: EquipmentClassCreateWithoutChildrenInputInputObject
      EquipmentClassCreateManyWithoutParentInput: EquipmentClassCreateManyWithoutParentInputInputObject
      EquipmentClassCreateWithoutParentInput: EquipmentClassCreateWithoutParentInputInputObject
      EquipmentCreateOneWithoutChildrenInput: EquipmentCreateOneWithoutChildrenInputInputObject
      EquipmentCreateWithoutChildrenInput: EquipmentCreateWithoutChildrenInputInputObject
      EquipmentCreateManyWithoutParentInput: EquipmentCreateManyWithoutParentInputInputObject
      EquipmentCreateWithoutParentInput: EquipmentCreateWithoutParentInputInputObject
      EquipmentPropertyCreateManyWithoutParentInput: EquipmentPropertyCreateManyWithoutParentInputInputObject
      EquipmentPropertyCreateWithoutParentInput: EquipmentPropertyCreateWithoutParentInputInputObject
      EquipmentClassPropertyCreateManyWithoutParentInput: EquipmentClassPropertyCreateManyWithoutParentInputInputObject
      EquipmentClassPropertyCreateWithoutParentInput: EquipmentClassPropertyCreateWithoutParentInputInputObject
      EquipmentClassUpdateInput: EquipmentClassUpdateInputInputObject
      EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInputInputObject
      EquipmentClassPropertyUpdateWithWhereUniqueWithoutEquipmentClassInput: EquipmentClassPropertyUpdateWithWhereUniqueWithoutEquipmentClassInputInputObject
      EquipmentClassPropertyUpdateWithoutEquipmentClassDataInput: EquipmentClassPropertyUpdateWithoutEquipmentClassDataInputInputObject
      EquipmentClassPropertyUpdateOneWithoutChildrenInput: EquipmentClassPropertyUpdateOneWithoutChildrenInputInputObject
      EquipmentClassPropertyUpdateWithoutChildrenDataInput: EquipmentClassPropertyUpdateWithoutChildrenDataInputInputObject
      EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput: EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInputInputObject
      EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInput: EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInputInputObject
      EquipmentUpdateManyWithoutEquipmentClassesInput: EquipmentUpdateManyWithoutEquipmentClassesInputInputObject
      EquipmentUpdateWithWhereUniqueWithoutEquipmentClassesInput: EquipmentUpdateWithWhereUniqueWithoutEquipmentClassesInputInputObject
      EquipmentUpdateWithoutEquipmentClassesDataInput: EquipmentUpdateWithoutEquipmentClassesDataInputInputObject
      EquipmentPropertyUpdateManyWithoutEquipmentInput: EquipmentPropertyUpdateManyWithoutEquipmentInputInputObject
      EquipmentPropertyUpdateWithWhereUniqueWithoutEquipmentInput: EquipmentPropertyUpdateWithWhereUniqueWithoutEquipmentInputInputObject
      EquipmentPropertyUpdateWithoutEquipmentDataInput: EquipmentPropertyUpdateWithoutEquipmentDataInputInputObject
      EquipmentPropertyUpdateOneWithoutChildrenInput: EquipmentPropertyUpdateOneWithoutChildrenInputInputObject
      EquipmentPropertyUpdateWithoutChildrenDataInput: EquipmentPropertyUpdateWithoutChildrenDataInputInputObject
      EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput: EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInputInputObject
      EquipmentUpdateWithoutEquipmentPropertiesDataInput: EquipmentUpdateWithoutEquipmentPropertiesDataInputInputObject
      EquipmentClassUpdateManyWithoutEquipmentsInput: EquipmentClassUpdateManyWithoutEquipmentsInputInputObject
      EquipmentClassUpdateWithWhereUniqueWithoutEquipmentsInput: EquipmentClassUpdateWithWhereUniqueWithoutEquipmentsInputInputObject
      EquipmentClassUpdateWithoutEquipmentsDataInput: EquipmentClassUpdateWithoutEquipmentsDataInputInputObject
      EquipmentClassUpdateOneWithoutChildrenInput: EquipmentClassUpdateOneWithoutChildrenInputInputObject
      EquipmentClassUpdateWithoutChildrenDataInput: EquipmentClassUpdateWithoutChildrenDataInputInputObject
      EquipmentClassUpsertWithoutChildrenInput: EquipmentClassUpsertWithoutChildrenInputInputObject
      EquipmentClassUpdateManyWithoutParentInput: EquipmentClassUpdateManyWithoutParentInputInputObject
      EquipmentClassUpdateWithWhereUniqueWithoutParentInput: EquipmentClassUpdateWithWhereUniqueWithoutParentInputInputObject
      EquipmentClassUpdateWithoutParentDataInput: EquipmentClassUpdateWithoutParentDataInputInputObject
      EquipmentClassUpsertWithWhereUniqueWithoutParentInput: EquipmentClassUpsertWithWhereUniqueWithoutParentInputInputObject
      EquipmentClassScalarWhereInput: EquipmentClassScalarWhereInputInputObject
      EquipmentClassUpdateManyWithWhereNestedInput: EquipmentClassUpdateManyWithWhereNestedInputInputObject
      EquipmentClassUpdateManyDataInput: EquipmentClassUpdateManyDataInputInputObject
      EquipmentClassUpsertWithWhereUniqueWithoutEquipmentsInput: EquipmentClassUpsertWithWhereUniqueWithoutEquipmentsInputInputObject
      EquipmentUpdateOneWithoutChildrenInput: EquipmentUpdateOneWithoutChildrenInputInputObject
      EquipmentUpdateWithoutChildrenDataInput: EquipmentUpdateWithoutChildrenDataInputInputObject
      EquipmentUpsertWithoutChildrenInput: EquipmentUpsertWithoutChildrenInputInputObject
      EquipmentUpdateManyWithoutParentInput: EquipmentUpdateManyWithoutParentInputInputObject
      EquipmentUpdateWithWhereUniqueWithoutParentInput: EquipmentUpdateWithWhereUniqueWithoutParentInputInputObject
      EquipmentUpdateWithoutParentDataInput: EquipmentUpdateWithoutParentDataInputInputObject
      EquipmentUpsertWithWhereUniqueWithoutParentInput: EquipmentUpsertWithWhereUniqueWithoutParentInputInputObject
      EquipmentScalarWhereInput: EquipmentScalarWhereInputInputObject
      EquipmentUpdateManyWithWhereNestedInput: EquipmentUpdateManyWithWhereNestedInputInputObject
      EquipmentUpdateManyDataInput: EquipmentUpdateManyDataInputInputObject
      EquipmentUpsertWithoutEquipmentPropertiesInput: EquipmentUpsertWithoutEquipmentPropertiesInputInputObject
      EquipmentPropertyUpsertWithoutChildrenInput: EquipmentPropertyUpsertWithoutChildrenInputInputObject
      EquipmentPropertyUpdateManyWithoutParentInput: EquipmentPropertyUpdateManyWithoutParentInputInputObject
      EquipmentPropertyUpdateWithWhereUniqueWithoutParentInput: EquipmentPropertyUpdateWithWhereUniqueWithoutParentInputInputObject
      EquipmentPropertyUpdateWithoutParentDataInput: EquipmentPropertyUpdateWithoutParentDataInputInputObject
      EquipmentPropertyUpsertWithWhereUniqueWithoutParentInput: EquipmentPropertyUpsertWithWhereUniqueWithoutParentInputInputObject
      EquipmentPropertyScalarWhereInput: EquipmentPropertyScalarWhereInputInputObject
      EquipmentPropertyUpdateManyWithWhereNestedInput: EquipmentPropertyUpdateManyWithWhereNestedInputInputObject
      EquipmentPropertyUpdateManyDataInput: EquipmentPropertyUpdateManyDataInputInputObject
      EquipmentPropertyUpsertWithWhereUniqueWithoutEquipmentInput: EquipmentPropertyUpsertWithWhereUniqueWithoutEquipmentInputInputObject
      EquipmentUpsertWithWhereUniqueWithoutEquipmentClassesInput: EquipmentUpsertWithWhereUniqueWithoutEquipmentClassesInputInputObject
      EquipmentClassUpsertWithoutEquipmentClassPropertiesInput: EquipmentClassUpsertWithoutEquipmentClassPropertiesInputInputObject
      EquipmentClassPropertyUpsertWithoutChildrenInput: EquipmentClassPropertyUpsertWithoutChildrenInputInputObject
      EquipmentClassPropertyUpdateManyWithoutParentInput: EquipmentClassPropertyUpdateManyWithoutParentInputInputObject
      EquipmentClassPropertyUpdateWithWhereUniqueWithoutParentInput: EquipmentClassPropertyUpdateWithWhereUniqueWithoutParentInputInputObject
      EquipmentClassPropertyUpdateWithoutParentDataInput: EquipmentClassPropertyUpdateWithoutParentDataInputInputObject
      EquipmentClassPropertyUpsertWithWhereUniqueWithoutParentInput: EquipmentClassPropertyUpsertWithWhereUniqueWithoutParentInputInputObject
      EquipmentClassPropertyScalarWhereInput: EquipmentClassPropertyScalarWhereInputInputObject
      EquipmentClassPropertyUpdateManyWithWhereNestedInput: EquipmentClassPropertyUpdateManyWithWhereNestedInputInputObject
      EquipmentClassPropertyUpdateManyDataInput: EquipmentClassPropertyUpdateManyDataInputInputObject
      EquipmentClassPropertyUpsertWithWhereUniqueWithoutEquipmentClassInput: EquipmentClassPropertyUpsertWithWhereUniqueWithoutEquipmentClassInputInputObject
      EquipmentClassUpdateManyMutationInput: EquipmentClassUpdateManyMutationInputInputObject
      EquipmentClassPropertyCreateInput: EquipmentClassPropertyCreateInputInputObject
      EquipmentClassPropertyUpdateInput: EquipmentClassPropertyUpdateInputInputObject
      EquipmentClassPropertyUpdateManyMutationInput: EquipmentClassPropertyUpdateManyMutationInputInputObject
      EquipmentCreateInput: EquipmentCreateInputInputObject
      EquipmentUpdateInput: EquipmentUpdateInputInputObject
      EquipmentUpdateManyMutationInput: EquipmentUpdateManyMutationInputInputObject
      EquipmentPropertyCreateInput: EquipmentPropertyCreateInputInputObject
      EquipmentPropertyUpdateInput: EquipmentPropertyUpdateInputInputObject
      EquipmentPropertyUpdateManyMutationInput: EquipmentPropertyUpdateManyMutationInputInputObject
      EquipmentClassMappingCreateInput: EquipmentClassMappingCreateInputInputObject
      EquipmentClassCreateOneInput: EquipmentClassCreateOneInputInputObject
      EquipmentCreateOneInput: EquipmentCreateOneInputInputObject
      EquipmentClassSubscriptionWhereInput: EquipmentClassSubscriptionWhereInputInputObject
      EquipmentClassPropertySubscriptionWhereInput: EquipmentClassPropertySubscriptionWhereInputInputObject
      EquipmentSubscriptionWhereInput: EquipmentSubscriptionWhereInputInputObject
      EquipmentPropertySubscriptionWhereInput: EquipmentPropertySubscriptionWhereInputInputObject
      EquipmentClassMappingSubscriptionWhereInput: EquipmentClassMappingSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    EquipmentClassPropertyOrderByInput: EquipmentClassPropertyOrderByInputValues,
    EquipmentOrderByInput: EquipmentOrderByInputValues,
    EquipmentPropertyOrderByInput: EquipmentPropertyOrderByInputValues,
    EquipmentClassOrderByInput: EquipmentClassOrderByInputValues,
    EquipmentClassMappingOrderByInput: EquipmentClassMappingOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'equipmentClass', args?: QueryEquipmentClassArgs[] | false, alias?: string  } 
  | { name: 'equipmentClasses', args?: QueryEquipmentClassesArgs[] | false, alias?: string  } 
  | { name: 'equipmentClassesConnection', args?: QueryEquipmentClassesConnectionArgs[] | false, alias?: string  } 
  | { name: 'equipmentClassProperty', args?: QueryEquipmentClassPropertyArgs[] | false, alias?: string  } 
  | { name: 'equipmentClassProperties', args?: QueryEquipmentClassPropertiesArgs[] | false, alias?: string  } 
  | { name: 'equipmentClassPropertiesConnection', args?: QueryEquipmentClassPropertiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'equipment', args?: QueryEquipmentArgs[] | false, alias?: string  } 
  | { name: 'equipments', args?: QueryEquipmentsArgs[] | false, alias?: string  } 
  | { name: 'equipmentsConnection', args?: QueryEquipmentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'equipmentProperty', args?: QueryEquipmentPropertyArgs[] | false, alias?: string  } 
  | { name: 'equipmentProperties', args?: QueryEquipmentPropertiesArgs[] | false, alias?: string  } 
  | { name: 'equipmentPropertiesConnection', args?: QueryEquipmentPropertiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'equipmentClassMappings', args?: QueryEquipmentClassMappingsArgs[] | false, alias?: string  } 
  | { name: 'equipmentClassMappingsConnection', args?: QueryEquipmentClassMappingsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'equipmentClass'
  | 'equipmentClasses'
  | 'equipmentClassesConnection'
  | 'equipmentClassProperty'
  | 'equipmentClassProperties'
  | 'equipmentClassPropertiesConnection'
  | 'equipment'
  | 'equipments'
  | 'equipmentsConnection'
  | 'equipmentProperty'
  | 'equipmentProperties'
  | 'equipmentPropertiesConnection'
  | 'equipmentClassMappings'
  | 'equipmentClassMappingsConnection'


type QueryEquipmentClassArgs =
  | 'where'
type QueryEquipmentClassesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEquipmentClassesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEquipmentClassPropertyArgs =
  | 'where'
type QueryEquipmentClassPropertiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEquipmentClassPropertiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEquipmentArgs =
  | 'where'
type QueryEquipmentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEquipmentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEquipmentPropertyArgs =
  | 'where'
type QueryEquipmentPropertiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEquipmentPropertiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEquipmentClassMappingsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEquipmentClassMappingsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  equipmentClass: {
    type: 'EquipmentClass'
    args: Record<QueryEquipmentClassArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EquipmentClassWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass | null> | prisma.EquipmentClass | null
  }
  equipmentClasses: {
    type: 'EquipmentClass'
    args: Record<QueryEquipmentClassesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EquipmentClassWhereInput | null, orderBy?: prisma.EquipmentClassOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass[]> | prisma.EquipmentClass[]
  }
  equipmentClassesConnection: {
    type: 'EquipmentClassConnection'
    args: Record<QueryEquipmentClassesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EquipmentClassWhereInput | null, orderBy?: prisma.EquipmentClassOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassConnection> | prisma.EquipmentClassConnection
  }
  equipmentClassProperty: {
    type: 'EquipmentClassProperty'
    args: Record<QueryEquipmentClassPropertyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EquipmentClassPropertyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassProperty | null> | prisma.EquipmentClassProperty | null
  }
  equipmentClassProperties: {
    type: 'EquipmentClassProperty'
    args: Record<QueryEquipmentClassPropertiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EquipmentClassPropertyWhereInput | null, orderBy?: prisma.EquipmentClassPropertyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassProperty[]> | prisma.EquipmentClassProperty[]
  }
  equipmentClassPropertiesConnection: {
    type: 'EquipmentClassPropertyConnection'
    args: Record<QueryEquipmentClassPropertiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EquipmentClassPropertyWhereInput | null, orderBy?: prisma.EquipmentClassPropertyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassPropertyConnection> | prisma.EquipmentClassPropertyConnection
  }
  equipment: {
    type: 'Equipment'
    args: Record<QueryEquipmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EquipmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment | null> | prisma.Equipment | null
  }
  equipments: {
    type: 'Equipment'
    args: Record<QueryEquipmentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EquipmentWhereInput | null, orderBy?: prisma.EquipmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment[]> | prisma.Equipment[]
  }
  equipmentsConnection: {
    type: 'EquipmentConnection'
    args: Record<QueryEquipmentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EquipmentWhereInput | null, orderBy?: prisma.EquipmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentConnection> | prisma.EquipmentConnection
  }
  equipmentProperty: {
    type: 'EquipmentProperty'
    args: Record<QueryEquipmentPropertyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EquipmentPropertyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentProperty | null> | prisma.EquipmentProperty | null
  }
  equipmentProperties: {
    type: 'EquipmentProperty'
    args: Record<QueryEquipmentPropertiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EquipmentPropertyWhereInput | null, orderBy?: prisma.EquipmentPropertyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentProperty[]> | prisma.EquipmentProperty[]
  }
  equipmentPropertiesConnection: {
    type: 'EquipmentPropertyConnection'
    args: Record<QueryEquipmentPropertiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EquipmentPropertyWhereInput | null, orderBy?: prisma.EquipmentPropertyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentPropertyConnection> | prisma.EquipmentPropertyConnection
  }
  equipmentClassMappings: {
    type: 'EquipmentClassMapping'
    args: Record<QueryEquipmentClassMappingsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EquipmentClassMappingWhereInput | null, orderBy?: prisma.EquipmentClassMappingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassMapping[]> | prisma.EquipmentClassMapping[]
  }
  equipmentClassMappingsConnection: {
    type: 'EquipmentClassMappingConnection'
    args: Record<QueryEquipmentClassMappingsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EquipmentClassMappingWhereInput | null, orderBy?: prisma.EquipmentClassMappingOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassMappingConnection> | prisma.EquipmentClassMappingConnection
  }
}
  

// Types for EquipmentClass

type EquipmentClassObject =
  | EquipmentClassFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'equipmentClassProperties', args?: EquipmentClassEquipmentClassPropertiesArgs[] | false, alias?: string  } 
  | { name: 'equipments', args?: EquipmentClassEquipmentsArgs[] | false, alias?: string  } 
  | { name: 'parent', args?: [] | false, alias?: string  } 
  | { name: 'children', args?: EquipmentClassChildrenArgs[] | false, alias?: string  } 

type EquipmentClassFields =
  | 'id'
  | 'name'
  | 'code'
  | 'description'
  | 'equipmentClassProperties'
  | 'equipments'
  | 'parent'
  | 'children'


type EquipmentClassEquipmentClassPropertiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type EquipmentClassEquipmentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type EquipmentClassChildrenArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface EquipmentClassFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  equipmentClassProperties: {
    type: 'EquipmentClassProperty'
    args: Record<EquipmentClassEquipmentClassPropertiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClass">,
      args: { where?: EquipmentClassPropertyWhereInput | null, orderBy?: prisma.EquipmentClassPropertyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassProperty[]> | prisma.EquipmentClassProperty[]
  }
  equipments: {
    type: 'Equipment'
    args: Record<EquipmentClassEquipmentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClass">,
      args: { where?: EquipmentWhereInput | null, orderBy?: prisma.EquipmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment[]> | prisma.Equipment[]
  }
  parent: {
    type: 'EquipmentClass'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentClass">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass | null> | prisma.EquipmentClass | null
  }
  children: {
    type: 'EquipmentClass'
    args: Record<EquipmentClassChildrenArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClass">,
      args: { where?: EquipmentClassWhereInput | null, orderBy?: prisma.EquipmentClassOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass[]> | prisma.EquipmentClass[]
  }
}
  

// Types for EquipmentClassProperty

type EquipmentClassPropertyObject =
  | EquipmentClassPropertyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'equipmentClass', args?: [] | false, alias?: string  } 
  | { name: 'parent', args?: [] | false, alias?: string  } 
  | { name: 'children', args?: EquipmentClassPropertyChildrenArgs[] | false, alias?: string  } 

type EquipmentClassPropertyFields =
  | 'id'
  | 'name'
  | 'code'
  | 'description'
  | 'equipmentClass'
  | 'parent'
  | 'children'


type EquipmentClassPropertyChildrenArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface EquipmentClassPropertyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  equipmentClass: {
    type: 'EquipmentClass'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassProperty">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass> | prisma.EquipmentClass
  }
  parent: {
    type: 'EquipmentClassProperty'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentClassProperty">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassProperty | null> | prisma.EquipmentClassProperty | null
  }
  children: {
    type: 'EquipmentClassProperty'
    args: Record<EquipmentClassPropertyChildrenArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassProperty">,
      args: { where?: EquipmentClassPropertyWhereInput | null, orderBy?: prisma.EquipmentClassPropertyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassProperty[]> | prisma.EquipmentClassProperty[]
  }
}
  

// Types for Equipment

type EquipmentObject =
  | EquipmentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'equipmentProperties', args?: EquipmentEquipmentPropertiesArgs[] | false, alias?: string  } 
  | { name: 'equipmentClasses', args?: EquipmentEquipmentClassesArgs[] | false, alias?: string  } 
  | { name: 'parent', args?: [] | false, alias?: string  } 
  | { name: 'children', args?: EquipmentChildrenArgs[] | false, alias?: string  } 

type EquipmentFields =
  | 'id'
  | 'name'
  | 'code'
  | 'description'
  | 'equipmentProperties'
  | 'equipmentClasses'
  | 'parent'
  | 'children'


type EquipmentEquipmentPropertiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type EquipmentEquipmentClassesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type EquipmentChildrenArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface EquipmentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  equipmentProperties: {
    type: 'EquipmentProperty'
    args: Record<EquipmentEquipmentPropertiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Equipment">,
      args: { where?: EquipmentPropertyWhereInput | null, orderBy?: prisma.EquipmentPropertyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentProperty[]> | prisma.EquipmentProperty[]
  }
  equipmentClasses: {
    type: 'EquipmentClass'
    args: Record<EquipmentEquipmentClassesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Equipment">,
      args: { where?: EquipmentClassWhereInput | null, orderBy?: prisma.EquipmentClassOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass[]> | prisma.EquipmentClass[]
  }
  parent: {
    type: 'Equipment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Equipment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment | null> | prisma.Equipment | null
  }
  children: {
    type: 'Equipment'
    args: Record<EquipmentChildrenArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Equipment">,
      args: { where?: EquipmentWhereInput | null, orderBy?: prisma.EquipmentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment[]> | prisma.Equipment[]
  }
}
  

// Types for EquipmentProperty

type EquipmentPropertyObject =
  | EquipmentPropertyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'equipment', args?: [] | false, alias?: string  } 
  | { name: 'parent', args?: [] | false, alias?: string  } 
  | { name: 'children', args?: EquipmentPropertyChildrenArgs[] | false, alias?: string  } 

type EquipmentPropertyFields =
  | 'id'
  | 'name'
  | 'code'
  | 'description'
  | 'equipment'
  | 'parent'
  | 'children'


type EquipmentPropertyChildrenArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface EquipmentPropertyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  equipment: {
    type: 'Equipment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentProperty">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment> | prisma.Equipment
  }
  parent: {
    type: 'EquipmentProperty'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentProperty">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentProperty | null> | prisma.EquipmentProperty | null
  }
  children: {
    type: 'EquipmentProperty'
    args: Record<EquipmentPropertyChildrenArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentProperty">,
      args: { where?: EquipmentPropertyWhereInput | null, orderBy?: prisma.EquipmentPropertyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentProperty[]> | prisma.EquipmentProperty[]
  }
}
  

// Types for EquipmentClassConnection

type EquipmentClassConnectionObject =
  | EquipmentClassConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EquipmentClassConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EquipmentClassConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EquipmentClassEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassEdge[]> | prisma.EquipmentClassEdge[]
  }
  aggregate: {
    type: 'AggregateEquipmentClass'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEquipmentClass> | prisma.AggregateEquipmentClass
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EquipmentClassEdge

type EquipmentClassEdgeObject =
  | EquipmentClassEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EquipmentClassEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EquipmentClassEdgeFieldDetails {
  node: {
    type: 'EquipmentClass'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass> | prisma.EquipmentClass
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEquipmentClass

type AggregateEquipmentClassObject =
  | AggregateEquipmentClassFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEquipmentClassFields =
  | 'count'



  

export interface AggregateEquipmentClassFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EquipmentClassPropertyConnection

type EquipmentClassPropertyConnectionObject =
  | EquipmentClassPropertyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EquipmentClassPropertyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EquipmentClassPropertyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassPropertyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EquipmentClassPropertyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassPropertyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassPropertyEdge[]> | prisma.EquipmentClassPropertyEdge[]
  }
  aggregate: {
    type: 'AggregateEquipmentClassProperty'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassPropertyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEquipmentClassProperty> | prisma.AggregateEquipmentClassProperty
  }
}
  

// Types for EquipmentClassPropertyEdge

type EquipmentClassPropertyEdgeObject =
  | EquipmentClassPropertyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EquipmentClassPropertyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EquipmentClassPropertyEdgeFieldDetails {
  node: {
    type: 'EquipmentClassProperty'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassPropertyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassProperty> | prisma.EquipmentClassProperty
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEquipmentClassProperty

type AggregateEquipmentClassPropertyObject =
  | AggregateEquipmentClassPropertyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEquipmentClassPropertyFields =
  | 'count'



  

export interface AggregateEquipmentClassPropertyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EquipmentConnection

type EquipmentConnectionObject =
  | EquipmentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EquipmentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EquipmentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EquipmentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentEdge[]> | prisma.EquipmentEdge[]
  }
  aggregate: {
    type: 'AggregateEquipment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEquipment> | prisma.AggregateEquipment
  }
}
  

// Types for EquipmentEdge

type EquipmentEdgeObject =
  | EquipmentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EquipmentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EquipmentEdgeFieldDetails {
  node: {
    type: 'Equipment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment> | prisma.Equipment
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEquipment

type AggregateEquipmentObject =
  | AggregateEquipmentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEquipmentFields =
  | 'count'



  

export interface AggregateEquipmentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EquipmentPropertyConnection

type EquipmentPropertyConnectionObject =
  | EquipmentPropertyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EquipmentPropertyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EquipmentPropertyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentPropertyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EquipmentPropertyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentPropertyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentPropertyEdge[]> | prisma.EquipmentPropertyEdge[]
  }
  aggregate: {
    type: 'AggregateEquipmentProperty'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentPropertyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEquipmentProperty> | prisma.AggregateEquipmentProperty
  }
}
  

// Types for EquipmentPropertyEdge

type EquipmentPropertyEdgeObject =
  | EquipmentPropertyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EquipmentPropertyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EquipmentPropertyEdgeFieldDetails {
  node: {
    type: 'EquipmentProperty'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentPropertyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentProperty> | prisma.EquipmentProperty
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEquipmentProperty

type AggregateEquipmentPropertyObject =
  | AggregateEquipmentPropertyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEquipmentPropertyFields =
  | 'count'



  

export interface AggregateEquipmentPropertyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EquipmentClassMapping

type EquipmentClassMappingObject =
  | EquipmentClassMappingFields
  | { name: 'equipmentClass', args?: [] | false, alias?: string  } 
  | { name: 'equipment', args?: [] | false, alias?: string  } 

type EquipmentClassMappingFields =
  | 'equipmentClass'
  | 'equipment'



  

export interface EquipmentClassMappingFieldDetails {
  equipmentClass: {
    type: 'EquipmentClass'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentClassMapping">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass | null> | prisma.EquipmentClass | null
  }
  equipment: {
    type: 'Equipment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentClassMapping">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment | null> | prisma.Equipment | null
  }
}
  

// Types for EquipmentClassMappingConnection

type EquipmentClassMappingConnectionObject =
  | EquipmentClassMappingConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EquipmentClassMappingConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EquipmentClassMappingConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassMappingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EquipmentClassMappingEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassMappingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassMappingEdge[]> | prisma.EquipmentClassMappingEdge[]
  }
  aggregate: {
    type: 'AggregateEquipmentClassMapping'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassMappingConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEquipmentClassMapping> | prisma.AggregateEquipmentClassMapping
  }
}
  

// Types for EquipmentClassMappingEdge

type EquipmentClassMappingEdgeObject =
  | EquipmentClassMappingEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EquipmentClassMappingEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EquipmentClassMappingEdgeFieldDetails {
  node: {
    type: 'EquipmentClassMapping'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassMappingEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassMapping> | prisma.EquipmentClassMapping
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEquipmentClassMapping

type AggregateEquipmentClassMappingObject =
  | AggregateEquipmentClassMappingFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEquipmentClassMappingFields =
  | 'count'



  

export interface AggregateEquipmentClassMappingFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createEquipmentClass', args?: MutationCreateEquipmentClassArgs[] | false, alias?: string  } 
  | { name: 'updateEquipmentClass', args?: MutationUpdateEquipmentClassArgs[] | false, alias?: string  } 
  | { name: 'updateManyEquipmentClasses', args?: MutationUpdateManyEquipmentClassesArgs[] | false, alias?: string  } 
  | { name: 'upsertEquipmentClass', args?: MutationUpsertEquipmentClassArgs[] | false, alias?: string  } 
  | { name: 'deleteEquipmentClass', args?: MutationDeleteEquipmentClassArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEquipmentClasses', args?: MutationDeleteManyEquipmentClassesArgs[] | false, alias?: string  } 
  | { name: 'createEquipmentClassProperty', args?: MutationCreateEquipmentClassPropertyArgs[] | false, alias?: string  } 
  | { name: 'updateEquipmentClassProperty', args?: MutationUpdateEquipmentClassPropertyArgs[] | false, alias?: string  } 
  | { name: 'updateManyEquipmentClassProperties', args?: MutationUpdateManyEquipmentClassPropertiesArgs[] | false, alias?: string  } 
  | { name: 'upsertEquipmentClassProperty', args?: MutationUpsertEquipmentClassPropertyArgs[] | false, alias?: string  } 
  | { name: 'deleteEquipmentClassProperty', args?: MutationDeleteEquipmentClassPropertyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEquipmentClassProperties', args?: MutationDeleteManyEquipmentClassPropertiesArgs[] | false, alias?: string  } 
  | { name: 'createEquipment', args?: MutationCreateEquipmentArgs[] | false, alias?: string  } 
  | { name: 'updateEquipment', args?: MutationUpdateEquipmentArgs[] | false, alias?: string  } 
  | { name: 'updateManyEquipments', args?: MutationUpdateManyEquipmentsArgs[] | false, alias?: string  } 
  | { name: 'upsertEquipment', args?: MutationUpsertEquipmentArgs[] | false, alias?: string  } 
  | { name: 'deleteEquipment', args?: MutationDeleteEquipmentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEquipments', args?: MutationDeleteManyEquipmentsArgs[] | false, alias?: string  } 
  | { name: 'createEquipmentProperty', args?: MutationCreateEquipmentPropertyArgs[] | false, alias?: string  } 
  | { name: 'updateEquipmentProperty', args?: MutationUpdateEquipmentPropertyArgs[] | false, alias?: string  } 
  | { name: 'updateManyEquipmentProperties', args?: MutationUpdateManyEquipmentPropertiesArgs[] | false, alias?: string  } 
  | { name: 'upsertEquipmentProperty', args?: MutationUpsertEquipmentPropertyArgs[] | false, alias?: string  } 
  | { name: 'deleteEquipmentProperty', args?: MutationDeleteEquipmentPropertyArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEquipmentProperties', args?: MutationDeleteManyEquipmentPropertiesArgs[] | false, alias?: string  } 
  | { name: 'createEquipmentClassMapping', args?: MutationCreateEquipmentClassMappingArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEquipmentClassMappings', args?: MutationDeleteManyEquipmentClassMappingsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createEquipmentClass'
  | 'updateEquipmentClass'
  | 'updateManyEquipmentClasses'
  | 'upsertEquipmentClass'
  | 'deleteEquipmentClass'
  | 'deleteManyEquipmentClasses'
  | 'createEquipmentClassProperty'
  | 'updateEquipmentClassProperty'
  | 'updateManyEquipmentClassProperties'
  | 'upsertEquipmentClassProperty'
  | 'deleteEquipmentClassProperty'
  | 'deleteManyEquipmentClassProperties'
  | 'createEquipment'
  | 'updateEquipment'
  | 'updateManyEquipments'
  | 'upsertEquipment'
  | 'deleteEquipment'
  | 'deleteManyEquipments'
  | 'createEquipmentProperty'
  | 'updateEquipmentProperty'
  | 'updateManyEquipmentProperties'
  | 'upsertEquipmentProperty'
  | 'deleteEquipmentProperty'
  | 'deleteManyEquipmentProperties'
  | 'createEquipmentClassMapping'
  | 'deleteManyEquipmentClassMappings'


type MutationCreateEquipmentClassArgs =
  | 'data'
type MutationUpdateEquipmentClassArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEquipmentClassesArgs =
  | 'data'
  | 'where'
type MutationUpsertEquipmentClassArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEquipmentClassArgs =
  | 'where'
type MutationDeleteManyEquipmentClassesArgs =
  | 'where'
type MutationCreateEquipmentClassPropertyArgs =
  | 'data'
type MutationUpdateEquipmentClassPropertyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEquipmentClassPropertiesArgs =
  | 'data'
  | 'where'
type MutationUpsertEquipmentClassPropertyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEquipmentClassPropertyArgs =
  | 'where'
type MutationDeleteManyEquipmentClassPropertiesArgs =
  | 'where'
type MutationCreateEquipmentArgs =
  | 'data'
type MutationUpdateEquipmentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEquipmentsArgs =
  | 'data'
  | 'where'
type MutationUpsertEquipmentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEquipmentArgs =
  | 'where'
type MutationDeleteManyEquipmentsArgs =
  | 'where'
type MutationCreateEquipmentPropertyArgs =
  | 'data'
type MutationUpdateEquipmentPropertyArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEquipmentPropertiesArgs =
  | 'data'
  | 'where'
type MutationUpsertEquipmentPropertyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEquipmentPropertyArgs =
  | 'where'
type MutationDeleteManyEquipmentPropertiesArgs =
  | 'where'
type MutationCreateEquipmentClassMappingArgs =
  | 'data'
type MutationDeleteManyEquipmentClassMappingsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createEquipmentClass: {
    type: 'EquipmentClass'
    args: Record<MutationCreateEquipmentClassArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentClassCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass> | prisma.EquipmentClass
  }
  updateEquipmentClass: {
    type: 'EquipmentClass'
    args: Record<MutationUpdateEquipmentClassArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentClassUpdateInput, where: EquipmentClassWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass | null> | prisma.EquipmentClass | null
  }
  updateManyEquipmentClasses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEquipmentClassesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentClassUpdateManyMutationInput, where?: EquipmentClassWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEquipmentClass: {
    type: 'EquipmentClass'
    args: Record<MutationUpsertEquipmentClassArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EquipmentClassWhereUniqueInput, create: EquipmentClassCreateInput, update: EquipmentClassUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass> | prisma.EquipmentClass
  }
  deleteEquipmentClass: {
    type: 'EquipmentClass'
    args: Record<MutationDeleteEquipmentClassArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EquipmentClassWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass | null> | prisma.EquipmentClass | null
  }
  deleteManyEquipmentClasses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEquipmentClassesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EquipmentClassWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEquipmentClassProperty: {
    type: 'EquipmentClassProperty'
    args: Record<MutationCreateEquipmentClassPropertyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentClassPropertyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassProperty> | prisma.EquipmentClassProperty
  }
  updateEquipmentClassProperty: {
    type: 'EquipmentClassProperty'
    args: Record<MutationUpdateEquipmentClassPropertyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentClassPropertyUpdateInput, where: EquipmentClassPropertyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassProperty | null> | prisma.EquipmentClassProperty | null
  }
  updateManyEquipmentClassProperties: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEquipmentClassPropertiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentClassPropertyUpdateManyMutationInput, where?: EquipmentClassPropertyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEquipmentClassProperty: {
    type: 'EquipmentClassProperty'
    args: Record<MutationUpsertEquipmentClassPropertyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EquipmentClassPropertyWhereUniqueInput, create: EquipmentClassPropertyCreateInput, update: EquipmentClassPropertyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassProperty> | prisma.EquipmentClassProperty
  }
  deleteEquipmentClassProperty: {
    type: 'EquipmentClassProperty'
    args: Record<MutationDeleteEquipmentClassPropertyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EquipmentClassPropertyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassProperty | null> | prisma.EquipmentClassProperty | null
  }
  deleteManyEquipmentClassProperties: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEquipmentClassPropertiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EquipmentClassPropertyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEquipment: {
    type: 'Equipment'
    args: Record<MutationCreateEquipmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment> | prisma.Equipment
  }
  updateEquipment: {
    type: 'Equipment'
    args: Record<MutationUpdateEquipmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentUpdateInput, where: EquipmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment | null> | prisma.Equipment | null
  }
  updateManyEquipments: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEquipmentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentUpdateManyMutationInput, where?: EquipmentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEquipment: {
    type: 'Equipment'
    args: Record<MutationUpsertEquipmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EquipmentWhereUniqueInput, create: EquipmentCreateInput, update: EquipmentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment> | prisma.Equipment
  }
  deleteEquipment: {
    type: 'Equipment'
    args: Record<MutationDeleteEquipmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EquipmentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment | null> | prisma.Equipment | null
  }
  deleteManyEquipments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEquipmentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EquipmentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEquipmentProperty: {
    type: 'EquipmentProperty'
    args: Record<MutationCreateEquipmentPropertyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentPropertyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentProperty> | prisma.EquipmentProperty
  }
  updateEquipmentProperty: {
    type: 'EquipmentProperty'
    args: Record<MutationUpdateEquipmentPropertyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentPropertyUpdateInput, where: EquipmentPropertyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentProperty | null> | prisma.EquipmentProperty | null
  }
  updateManyEquipmentProperties: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEquipmentPropertiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentPropertyUpdateManyMutationInput, where?: EquipmentPropertyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEquipmentProperty: {
    type: 'EquipmentProperty'
    args: Record<MutationUpsertEquipmentPropertyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EquipmentPropertyWhereUniqueInput, create: EquipmentPropertyCreateInput, update: EquipmentPropertyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentProperty> | prisma.EquipmentProperty
  }
  deleteEquipmentProperty: {
    type: 'EquipmentProperty'
    args: Record<MutationDeleteEquipmentPropertyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EquipmentPropertyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentProperty | null> | prisma.EquipmentProperty | null
  }
  deleteManyEquipmentProperties: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEquipmentPropertiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EquipmentPropertyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEquipmentClassMapping: {
    type: 'EquipmentClassMapping'
    args: Record<MutationCreateEquipmentClassMappingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EquipmentClassMappingCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassMapping> | prisma.EquipmentClassMapping
  }
  deleteManyEquipmentClassMappings: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEquipmentClassMappingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EquipmentClassMappingWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'equipmentClass', args?: SubscriptionEquipmentClassArgs[] | false, alias?: string  } 
  | { name: 'equipmentClassProperty', args?: SubscriptionEquipmentClassPropertyArgs[] | false, alias?: string  } 
  | { name: 'equipment', args?: SubscriptionEquipmentArgs[] | false, alias?: string  } 
  | { name: 'equipmentProperty', args?: SubscriptionEquipmentPropertyArgs[] | false, alias?: string  } 
  | { name: 'equipmentClassMapping', args?: SubscriptionEquipmentClassMappingArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'equipmentClass'
  | 'equipmentClassProperty'
  | 'equipment'
  | 'equipmentProperty'
  | 'equipmentClassMapping'


type SubscriptionEquipmentClassArgs =
  | 'where'
type SubscriptionEquipmentClassPropertyArgs =
  | 'where'
type SubscriptionEquipmentArgs =
  | 'where'
type SubscriptionEquipmentPropertyArgs =
  | 'where'
type SubscriptionEquipmentClassMappingArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  equipmentClass: {
    type: 'EquipmentClassSubscriptionPayload'
    args: Record<SubscriptionEquipmentClassArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EquipmentClassSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassSubscriptionPayload | null> | prisma.EquipmentClassSubscriptionPayload | null
  }
  equipmentClassProperty: {
    type: 'EquipmentClassPropertySubscriptionPayload'
    args: Record<SubscriptionEquipmentClassPropertyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EquipmentClassPropertySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassPropertySubscriptionPayload | null> | prisma.EquipmentClassPropertySubscriptionPayload | null
  }
  equipment: {
    type: 'EquipmentSubscriptionPayload'
    args: Record<SubscriptionEquipmentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EquipmentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentSubscriptionPayload | null> | prisma.EquipmentSubscriptionPayload | null
  }
  equipmentProperty: {
    type: 'EquipmentPropertySubscriptionPayload'
    args: Record<SubscriptionEquipmentPropertyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EquipmentPropertySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentPropertySubscriptionPayload | null> | prisma.EquipmentPropertySubscriptionPayload | null
  }
  equipmentClassMapping: {
    type: 'EquipmentClassMappingSubscriptionPayload'
    args: Record<SubscriptionEquipmentClassMappingArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EquipmentClassMappingSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassMappingSubscriptionPayload | null> | prisma.EquipmentClassMappingSubscriptionPayload | null
  }
}
  

// Types for EquipmentClassSubscriptionPayload

type EquipmentClassSubscriptionPayloadObject =
  | EquipmentClassSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EquipmentClassSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EquipmentClassSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'EquipmentClass'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentClassSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClass | null> | prisma.EquipmentClass | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EquipmentClassPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentClassSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassPreviousValues | null> | prisma.EquipmentClassPreviousValues | null
  }
}
  

// Types for EquipmentClassPreviousValues

type EquipmentClassPreviousValuesObject =
  | EquipmentClassPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 

type EquipmentClassPreviousValuesFields =
  | 'id'
  | 'name'
  | 'code'
  | 'description'



  

export interface EquipmentClassPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EquipmentClassPropertySubscriptionPayload

type EquipmentClassPropertySubscriptionPayloadObject =
  | EquipmentClassPropertySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EquipmentClassPropertySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EquipmentClassPropertySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassPropertySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'EquipmentClassProperty'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentClassPropertySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassProperty | null> | prisma.EquipmentClassProperty | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EquipmentClassPropertyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentClassPropertySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassPropertyPreviousValues | null> | prisma.EquipmentClassPropertyPreviousValues | null
  }
}
  

// Types for EquipmentClassPropertyPreviousValues

type EquipmentClassPropertyPreviousValuesObject =
  | EquipmentClassPropertyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 

type EquipmentClassPropertyPreviousValuesFields =
  | 'id'
  | 'name'
  | 'code'
  | 'description'



  

export interface EquipmentClassPropertyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EquipmentSubscriptionPayload

type EquipmentSubscriptionPayloadObject =
  | EquipmentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EquipmentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EquipmentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Equipment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Equipment | null> | prisma.Equipment | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EquipmentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentPreviousValues | null> | prisma.EquipmentPreviousValues | null
  }
}
  

// Types for EquipmentPreviousValues

type EquipmentPreviousValuesObject =
  | EquipmentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 

type EquipmentPreviousValuesFields =
  | 'id'
  | 'name'
  | 'code'
  | 'description'



  

export interface EquipmentPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EquipmentPropertySubscriptionPayload

type EquipmentPropertySubscriptionPayloadObject =
  | EquipmentPropertySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EquipmentPropertySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EquipmentPropertySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentPropertySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'EquipmentProperty'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentPropertySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentProperty | null> | prisma.EquipmentProperty | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EquipmentPropertyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentPropertySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentPropertyPreviousValues | null> | prisma.EquipmentPropertyPreviousValues | null
  }
}
  

// Types for EquipmentPropertyPreviousValues

type EquipmentPropertyPreviousValuesObject =
  | EquipmentPropertyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'code', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 

type EquipmentPropertyPreviousValuesFields =
  | 'id'
  | 'name'
  | 'code'
  | 'description'



  

export interface EquipmentPropertyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  code: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EquipmentClassMappingSubscriptionPayload

type EquipmentClassMappingSubscriptionPayloadObject =
  | EquipmentClassMappingSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 

type EquipmentClassMappingSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'



  

export interface EquipmentClassMappingSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EquipmentClassMappingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'EquipmentClassMapping'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EquipmentClassMappingSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EquipmentClassMapping | null> | prisma.EquipmentClassMapping | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
}
  


export interface EquipmentClassWhereUniqueInput {
  id?: string | null
}
export type EquipmentClassWhereUniqueInputInputObject =
  | Extract<keyof EquipmentClassWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EquipmentClassPropertyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  equipmentClass?: EquipmentClassWhereInput | null
  parent?: EquipmentClassPropertyWhereInput | null
  children_every?: EquipmentClassPropertyWhereInput | null
  children_some?: EquipmentClassPropertyWhereInput | null
  children_none?: EquipmentClassPropertyWhereInput | null
  AND?: EquipmentClassPropertyWhereInput[]
  OR?: EquipmentClassPropertyWhereInput[]
  NOT?: EquipmentClassPropertyWhereInput[]
}
export type EquipmentClassPropertyWhereInputInputObject =
  | Extract<keyof EquipmentClassPropertyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'equipmentClass', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children_every', alias?: string  } 
  | { name: 'children_some', alias?: string  } 
  | { name: 'children_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentClassWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  equipmentClassProperties_every?: EquipmentClassPropertyWhereInput | null
  equipmentClassProperties_some?: EquipmentClassPropertyWhereInput | null
  equipmentClassProperties_none?: EquipmentClassPropertyWhereInput | null
  equipments_every?: EquipmentWhereInput | null
  equipments_some?: EquipmentWhereInput | null
  equipments_none?: EquipmentWhereInput | null
  parent?: EquipmentClassWhereInput | null
  children_every?: EquipmentClassWhereInput | null
  children_some?: EquipmentClassWhereInput | null
  children_none?: EquipmentClassWhereInput | null
  AND?: EquipmentClassWhereInput[]
  OR?: EquipmentClassWhereInput[]
  NOT?: EquipmentClassWhereInput[]
}
export type EquipmentClassWhereInputInputObject =
  | Extract<keyof EquipmentClassWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'equipmentClassProperties_every', alias?: string  } 
  | { name: 'equipmentClassProperties_some', alias?: string  } 
  | { name: 'equipmentClassProperties_none', alias?: string  } 
  | { name: 'equipments_every', alias?: string  } 
  | { name: 'equipments_some', alias?: string  } 
  | { name: 'equipments_none', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children_every', alias?: string  } 
  | { name: 'children_some', alias?: string  } 
  | { name: 'children_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  equipmentProperties_every?: EquipmentPropertyWhereInput | null
  equipmentProperties_some?: EquipmentPropertyWhereInput | null
  equipmentProperties_none?: EquipmentPropertyWhereInput | null
  equipmentClasses_every?: EquipmentClassWhereInput | null
  equipmentClasses_some?: EquipmentClassWhereInput | null
  equipmentClasses_none?: EquipmentClassWhereInput | null
  parent?: EquipmentWhereInput | null
  children_every?: EquipmentWhereInput | null
  children_some?: EquipmentWhereInput | null
  children_none?: EquipmentWhereInput | null
  AND?: EquipmentWhereInput[]
  OR?: EquipmentWhereInput[]
  NOT?: EquipmentWhereInput[]
}
export type EquipmentWhereInputInputObject =
  | Extract<keyof EquipmentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'equipmentProperties_every', alias?: string  } 
  | { name: 'equipmentProperties_some', alias?: string  } 
  | { name: 'equipmentProperties_none', alias?: string  } 
  | { name: 'equipmentClasses_every', alias?: string  } 
  | { name: 'equipmentClasses_some', alias?: string  } 
  | { name: 'equipmentClasses_none', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children_every', alias?: string  } 
  | { name: 'children_some', alias?: string  } 
  | { name: 'children_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentPropertyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  equipment?: EquipmentWhereInput | null
  parent?: EquipmentPropertyWhereInput | null
  children_every?: EquipmentPropertyWhereInput | null
  children_some?: EquipmentPropertyWhereInput | null
  children_none?: EquipmentPropertyWhereInput | null
  AND?: EquipmentPropertyWhereInput[]
  OR?: EquipmentPropertyWhereInput[]
  NOT?: EquipmentPropertyWhereInput[]
}
export type EquipmentPropertyWhereInputInputObject =
  | Extract<keyof EquipmentPropertyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'equipment', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children_every', alias?: string  } 
  | { name: 'children_some', alias?: string  } 
  | { name: 'children_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentClassPropertyWhereUniqueInput {
  id?: string | null
}
export type EquipmentClassPropertyWhereUniqueInputInputObject =
  | Extract<keyof EquipmentClassPropertyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EquipmentWhereUniqueInput {
  id?: string | null
}
export type EquipmentWhereUniqueInputInputObject =
  | Extract<keyof EquipmentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EquipmentPropertyWhereUniqueInput {
  id?: string | null
}
export type EquipmentPropertyWhereUniqueInputInputObject =
  | Extract<keyof EquipmentPropertyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EquipmentClassMappingWhereInput {
  equipmentClass?: EquipmentClassWhereInput | null
  equipment?: EquipmentWhereInput | null
  AND?: EquipmentClassMappingWhereInput[]
  OR?: EquipmentClassMappingWhereInput[]
  NOT?: EquipmentClassMappingWhereInput[]
}
export type EquipmentClassMappingWhereInputInputObject =
  | Extract<keyof EquipmentClassMappingWhereInput, string>
  | { name: 'equipmentClass', alias?: string  } 
  | { name: 'equipment', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentClassCreateInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipmentClassProperties?: EquipmentClassPropertyCreateManyWithoutEquipmentClassInput | null
  equipments?: EquipmentCreateManyWithoutEquipmentClassesInput | null
  parent?: EquipmentClassCreateOneWithoutChildrenInput | null
  children?: EquipmentClassCreateManyWithoutParentInput | null
}
export type EquipmentClassCreateInputInputObject =
  | Extract<keyof EquipmentClassCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClassProperties', alias?: string  } 
  | { name: 'equipments', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassPropertyCreateManyWithoutEquipmentClassInput {
  create?: EquipmentClassPropertyCreateWithoutEquipmentClassInput[]
  connect?: EquipmentClassPropertyWhereUniqueInput[]
}
export type EquipmentClassPropertyCreateManyWithoutEquipmentClassInputInputObject =
  | Extract<keyof EquipmentClassPropertyCreateManyWithoutEquipmentClassInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentClassPropertyCreateWithoutEquipmentClassInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  parent?: EquipmentClassPropertyCreateOneWithoutChildrenInput | null
  children?: EquipmentClassPropertyCreateManyWithoutParentInput | null
}
export type EquipmentClassPropertyCreateWithoutEquipmentClassInputInputObject =
  | Extract<keyof EquipmentClassPropertyCreateWithoutEquipmentClassInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassPropertyCreateOneWithoutChildrenInput {
  create?: EquipmentClassPropertyCreateWithoutChildrenInput | null
  connect?: EquipmentClassPropertyWhereUniqueInput | null
}
export type EquipmentClassPropertyCreateOneWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentClassPropertyCreateOneWithoutChildrenInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentClassPropertyCreateWithoutChildrenInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipmentClass?: EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput
  parent?: EquipmentClassPropertyCreateOneWithoutChildrenInput | null
}
export type EquipmentClassPropertyCreateWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentClassPropertyCreateWithoutChildrenInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClass', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  
export interface EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput {
  create?: EquipmentClassCreateWithoutEquipmentClassPropertiesInput | null
  connect?: EquipmentClassWhereUniqueInput | null
}
export type EquipmentClassCreateOneWithoutEquipmentClassPropertiesInputInputObject =
  | Extract<keyof EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentClassCreateWithoutEquipmentClassPropertiesInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipments?: EquipmentCreateManyWithoutEquipmentClassesInput | null
  parent?: EquipmentClassCreateOneWithoutChildrenInput | null
  children?: EquipmentClassCreateManyWithoutParentInput | null
}
export type EquipmentClassCreateWithoutEquipmentClassPropertiesInputInputObject =
  | Extract<keyof EquipmentClassCreateWithoutEquipmentClassPropertiesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipments', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentCreateManyWithoutEquipmentClassesInput {
  create?: EquipmentCreateWithoutEquipmentClassesInput[]
  connect?: EquipmentWhereUniqueInput[]
}
export type EquipmentCreateManyWithoutEquipmentClassesInputInputObject =
  | Extract<keyof EquipmentCreateManyWithoutEquipmentClassesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentCreateWithoutEquipmentClassesInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipmentProperties?: EquipmentPropertyCreateManyWithoutEquipmentInput | null
  parent?: EquipmentCreateOneWithoutChildrenInput | null
  children?: EquipmentCreateManyWithoutParentInput | null
}
export type EquipmentCreateWithoutEquipmentClassesInputInputObject =
  | Extract<keyof EquipmentCreateWithoutEquipmentClassesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentProperties', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentPropertyCreateManyWithoutEquipmentInput {
  create?: EquipmentPropertyCreateWithoutEquipmentInput[]
  connect?: EquipmentPropertyWhereUniqueInput[]
}
export type EquipmentPropertyCreateManyWithoutEquipmentInputInputObject =
  | Extract<keyof EquipmentPropertyCreateManyWithoutEquipmentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentPropertyCreateWithoutEquipmentInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  parent?: EquipmentPropertyCreateOneWithoutChildrenInput | null
  children?: EquipmentPropertyCreateManyWithoutParentInput | null
}
export type EquipmentPropertyCreateWithoutEquipmentInputInputObject =
  | Extract<keyof EquipmentPropertyCreateWithoutEquipmentInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentPropertyCreateOneWithoutChildrenInput {
  create?: EquipmentPropertyCreateWithoutChildrenInput | null
  connect?: EquipmentPropertyWhereUniqueInput | null
}
export type EquipmentPropertyCreateOneWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentPropertyCreateOneWithoutChildrenInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentPropertyCreateWithoutChildrenInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipment?: EquipmentCreateOneWithoutEquipmentPropertiesInput
  parent?: EquipmentPropertyCreateOneWithoutChildrenInput | null
}
export type EquipmentPropertyCreateWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentPropertyCreateWithoutChildrenInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipment', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  
export interface EquipmentCreateOneWithoutEquipmentPropertiesInput {
  create?: EquipmentCreateWithoutEquipmentPropertiesInput | null
  connect?: EquipmentWhereUniqueInput | null
}
export type EquipmentCreateOneWithoutEquipmentPropertiesInputInputObject =
  | Extract<keyof EquipmentCreateOneWithoutEquipmentPropertiesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentCreateWithoutEquipmentPropertiesInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipmentClasses?: EquipmentClassCreateManyWithoutEquipmentsInput | null
  parent?: EquipmentCreateOneWithoutChildrenInput | null
  children?: EquipmentCreateManyWithoutParentInput | null
}
export type EquipmentCreateWithoutEquipmentPropertiesInputInputObject =
  | Extract<keyof EquipmentCreateWithoutEquipmentPropertiesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClasses', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassCreateManyWithoutEquipmentsInput {
  create?: EquipmentClassCreateWithoutEquipmentsInput[]
  connect?: EquipmentClassWhereUniqueInput[]
}
export type EquipmentClassCreateManyWithoutEquipmentsInputInputObject =
  | Extract<keyof EquipmentClassCreateManyWithoutEquipmentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentClassCreateWithoutEquipmentsInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipmentClassProperties?: EquipmentClassPropertyCreateManyWithoutEquipmentClassInput | null
  parent?: EquipmentClassCreateOneWithoutChildrenInput | null
  children?: EquipmentClassCreateManyWithoutParentInput | null
}
export type EquipmentClassCreateWithoutEquipmentsInputInputObject =
  | Extract<keyof EquipmentClassCreateWithoutEquipmentsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClassProperties', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassCreateOneWithoutChildrenInput {
  create?: EquipmentClassCreateWithoutChildrenInput | null
  connect?: EquipmentClassWhereUniqueInput | null
}
export type EquipmentClassCreateOneWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentClassCreateOneWithoutChildrenInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentClassCreateWithoutChildrenInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipmentClassProperties?: EquipmentClassPropertyCreateManyWithoutEquipmentClassInput | null
  equipments?: EquipmentCreateManyWithoutEquipmentClassesInput | null
  parent?: EquipmentClassCreateOneWithoutChildrenInput | null
}
export type EquipmentClassCreateWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentClassCreateWithoutChildrenInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClassProperties', alias?: string  } 
  | { name: 'equipments', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  
export interface EquipmentClassCreateManyWithoutParentInput {
  create?: EquipmentClassCreateWithoutParentInput[]
  connect?: EquipmentClassWhereUniqueInput[]
}
export type EquipmentClassCreateManyWithoutParentInputInputObject =
  | Extract<keyof EquipmentClassCreateManyWithoutParentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentClassCreateWithoutParentInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipmentClassProperties?: EquipmentClassPropertyCreateManyWithoutEquipmentClassInput | null
  equipments?: EquipmentCreateManyWithoutEquipmentClassesInput | null
  children?: EquipmentClassCreateManyWithoutParentInput | null
}
export type EquipmentClassCreateWithoutParentInputInputObject =
  | Extract<keyof EquipmentClassCreateWithoutParentInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClassProperties', alias?: string  } 
  | { name: 'equipments', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentCreateOneWithoutChildrenInput {
  create?: EquipmentCreateWithoutChildrenInput | null
  connect?: EquipmentWhereUniqueInput | null
}
export type EquipmentCreateOneWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentCreateOneWithoutChildrenInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentCreateWithoutChildrenInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipmentProperties?: EquipmentPropertyCreateManyWithoutEquipmentInput | null
  equipmentClasses?: EquipmentClassCreateManyWithoutEquipmentsInput | null
  parent?: EquipmentCreateOneWithoutChildrenInput | null
}
export type EquipmentCreateWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentCreateWithoutChildrenInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentProperties', alias?: string  } 
  | { name: 'equipmentClasses', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  
export interface EquipmentCreateManyWithoutParentInput {
  create?: EquipmentCreateWithoutParentInput[]
  connect?: EquipmentWhereUniqueInput[]
}
export type EquipmentCreateManyWithoutParentInputInputObject =
  | Extract<keyof EquipmentCreateManyWithoutParentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentCreateWithoutParentInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipmentProperties?: EquipmentPropertyCreateManyWithoutEquipmentInput | null
  equipmentClasses?: EquipmentClassCreateManyWithoutEquipmentsInput | null
  children?: EquipmentCreateManyWithoutParentInput | null
}
export type EquipmentCreateWithoutParentInputInputObject =
  | Extract<keyof EquipmentCreateWithoutParentInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentProperties', alias?: string  } 
  | { name: 'equipmentClasses', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentPropertyCreateManyWithoutParentInput {
  create?: EquipmentPropertyCreateWithoutParentInput[]
  connect?: EquipmentPropertyWhereUniqueInput[]
}
export type EquipmentPropertyCreateManyWithoutParentInputInputObject =
  | Extract<keyof EquipmentPropertyCreateManyWithoutParentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentPropertyCreateWithoutParentInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipment?: EquipmentCreateOneWithoutEquipmentPropertiesInput
  children?: EquipmentPropertyCreateManyWithoutParentInput | null
}
export type EquipmentPropertyCreateWithoutParentInputInputObject =
  | Extract<keyof EquipmentPropertyCreateWithoutParentInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipment', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassPropertyCreateManyWithoutParentInput {
  create?: EquipmentClassPropertyCreateWithoutParentInput[]
  connect?: EquipmentClassPropertyWhereUniqueInput[]
}
export type EquipmentClassPropertyCreateManyWithoutParentInputInputObject =
  | Extract<keyof EquipmentClassPropertyCreateManyWithoutParentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentClassPropertyCreateWithoutParentInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipmentClass?: EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput
  children?: EquipmentClassPropertyCreateManyWithoutParentInput | null
}
export type EquipmentClassPropertyCreateWithoutParentInputInputObject =
  | Extract<keyof EquipmentClassPropertyCreateWithoutParentInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClass', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassUpdateInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipmentClassProperties?: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput | null
  equipments?: EquipmentUpdateManyWithoutEquipmentClassesInput | null
  parent?: EquipmentClassUpdateOneWithoutChildrenInput | null
  children?: EquipmentClassUpdateManyWithoutParentInput | null
}
export type EquipmentClassUpdateInputInputObject =
  | Extract<keyof EquipmentClassUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClassProperties', alias?: string  } 
  | { name: 'equipments', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput {
  create?: EquipmentClassPropertyCreateWithoutEquipmentClassInput[]
  delete?: EquipmentClassPropertyWhereUniqueInput[]
  connect?: EquipmentClassPropertyWhereUniqueInput[]
  set?: EquipmentClassPropertyWhereUniqueInput[]
  disconnect?: EquipmentClassPropertyWhereUniqueInput[]
  update?: EquipmentClassPropertyUpdateWithWhereUniqueWithoutEquipmentClassInput[]
  upsert?: EquipmentClassPropertyUpsertWithWhereUniqueWithoutEquipmentClassInput[]
  deleteMany?: EquipmentClassPropertyScalarWhereInput[]
  updateMany?: EquipmentClassPropertyUpdateManyWithWhereNestedInput[]
}
export type EquipmentClassPropertyUpdateManyWithoutEquipmentClassInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EquipmentClassPropertyUpdateWithWhereUniqueWithoutEquipmentClassInput {
  where?: EquipmentClassPropertyWhereUniqueInput
  data?: EquipmentClassPropertyUpdateWithoutEquipmentClassDataInput
}
export type EquipmentClassPropertyUpdateWithWhereUniqueWithoutEquipmentClassInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpdateWithWhereUniqueWithoutEquipmentClassInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EquipmentClassPropertyUpdateWithoutEquipmentClassDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  parent?: EquipmentClassPropertyUpdateOneWithoutChildrenInput | null
  children?: EquipmentClassPropertyUpdateManyWithoutParentInput | null
}
export type EquipmentClassPropertyUpdateWithoutEquipmentClassDataInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpdateWithoutEquipmentClassDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassPropertyUpdateOneWithoutChildrenInput {
  create?: EquipmentClassPropertyCreateWithoutChildrenInput | null
  update?: EquipmentClassPropertyUpdateWithoutChildrenDataInput | null
  upsert?: EquipmentClassPropertyUpsertWithoutChildrenInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: EquipmentClassPropertyWhereUniqueInput | null
}
export type EquipmentClassPropertyUpdateOneWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpdateOneWithoutChildrenInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentClassPropertyUpdateWithoutChildrenDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipmentClass?: EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput | null
  parent?: EquipmentClassPropertyUpdateOneWithoutChildrenInput | null
}
export type EquipmentClassPropertyUpdateWithoutChildrenDataInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpdateWithoutChildrenDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClass', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  
export interface EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput {
  create?: EquipmentClassCreateWithoutEquipmentClassPropertiesInput | null
  update?: EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInput | null
  upsert?: EquipmentClassUpsertWithoutEquipmentClassPropertiesInput | null
  connect?: EquipmentClassWhereUniqueInput | null
}
export type EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInputInputObject =
  | Extract<keyof EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipments?: EquipmentUpdateManyWithoutEquipmentClassesInput | null
  parent?: EquipmentClassUpdateOneWithoutChildrenInput | null
  children?: EquipmentClassUpdateManyWithoutParentInput | null
}
export type EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInputInputObject =
  | Extract<keyof EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipments', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentUpdateManyWithoutEquipmentClassesInput {
  create?: EquipmentCreateWithoutEquipmentClassesInput[]
  delete?: EquipmentWhereUniqueInput[]
  connect?: EquipmentWhereUniqueInput[]
  set?: EquipmentWhereUniqueInput[]
  disconnect?: EquipmentWhereUniqueInput[]
  update?: EquipmentUpdateWithWhereUniqueWithoutEquipmentClassesInput[]
  upsert?: EquipmentUpsertWithWhereUniqueWithoutEquipmentClassesInput[]
  deleteMany?: EquipmentScalarWhereInput[]
  updateMany?: EquipmentUpdateManyWithWhereNestedInput[]
}
export type EquipmentUpdateManyWithoutEquipmentClassesInputInputObject =
  | Extract<keyof EquipmentUpdateManyWithoutEquipmentClassesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EquipmentUpdateWithWhereUniqueWithoutEquipmentClassesInput {
  where?: EquipmentWhereUniqueInput
  data?: EquipmentUpdateWithoutEquipmentClassesDataInput
}
export type EquipmentUpdateWithWhereUniqueWithoutEquipmentClassesInputInputObject =
  | Extract<keyof EquipmentUpdateWithWhereUniqueWithoutEquipmentClassesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EquipmentUpdateWithoutEquipmentClassesDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipmentProperties?: EquipmentPropertyUpdateManyWithoutEquipmentInput | null
  parent?: EquipmentUpdateOneWithoutChildrenInput | null
  children?: EquipmentUpdateManyWithoutParentInput | null
}
export type EquipmentUpdateWithoutEquipmentClassesDataInputInputObject =
  | Extract<keyof EquipmentUpdateWithoutEquipmentClassesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentProperties', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentPropertyUpdateManyWithoutEquipmentInput {
  create?: EquipmentPropertyCreateWithoutEquipmentInput[]
  delete?: EquipmentPropertyWhereUniqueInput[]
  connect?: EquipmentPropertyWhereUniqueInput[]
  set?: EquipmentPropertyWhereUniqueInput[]
  disconnect?: EquipmentPropertyWhereUniqueInput[]
  update?: EquipmentPropertyUpdateWithWhereUniqueWithoutEquipmentInput[]
  upsert?: EquipmentPropertyUpsertWithWhereUniqueWithoutEquipmentInput[]
  deleteMany?: EquipmentPropertyScalarWhereInput[]
  updateMany?: EquipmentPropertyUpdateManyWithWhereNestedInput[]
}
export type EquipmentPropertyUpdateManyWithoutEquipmentInputInputObject =
  | Extract<keyof EquipmentPropertyUpdateManyWithoutEquipmentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EquipmentPropertyUpdateWithWhereUniqueWithoutEquipmentInput {
  where?: EquipmentPropertyWhereUniqueInput
  data?: EquipmentPropertyUpdateWithoutEquipmentDataInput
}
export type EquipmentPropertyUpdateWithWhereUniqueWithoutEquipmentInputInputObject =
  | Extract<keyof EquipmentPropertyUpdateWithWhereUniqueWithoutEquipmentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EquipmentPropertyUpdateWithoutEquipmentDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  parent?: EquipmentPropertyUpdateOneWithoutChildrenInput | null
  children?: EquipmentPropertyUpdateManyWithoutParentInput | null
}
export type EquipmentPropertyUpdateWithoutEquipmentDataInputInputObject =
  | Extract<keyof EquipmentPropertyUpdateWithoutEquipmentDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentPropertyUpdateOneWithoutChildrenInput {
  create?: EquipmentPropertyCreateWithoutChildrenInput | null
  update?: EquipmentPropertyUpdateWithoutChildrenDataInput | null
  upsert?: EquipmentPropertyUpsertWithoutChildrenInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: EquipmentPropertyWhereUniqueInput | null
}
export type EquipmentPropertyUpdateOneWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentPropertyUpdateOneWithoutChildrenInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentPropertyUpdateWithoutChildrenDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipment?: EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput | null
  parent?: EquipmentPropertyUpdateOneWithoutChildrenInput | null
}
export type EquipmentPropertyUpdateWithoutChildrenDataInputInputObject =
  | Extract<keyof EquipmentPropertyUpdateWithoutChildrenDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipment', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  
export interface EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput {
  create?: EquipmentCreateWithoutEquipmentPropertiesInput | null
  update?: EquipmentUpdateWithoutEquipmentPropertiesDataInput | null
  upsert?: EquipmentUpsertWithoutEquipmentPropertiesInput | null
  connect?: EquipmentWhereUniqueInput | null
}
export type EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInputInputObject =
  | Extract<keyof EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentUpdateWithoutEquipmentPropertiesDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipmentClasses?: EquipmentClassUpdateManyWithoutEquipmentsInput | null
  parent?: EquipmentUpdateOneWithoutChildrenInput | null
  children?: EquipmentUpdateManyWithoutParentInput | null
}
export type EquipmentUpdateWithoutEquipmentPropertiesDataInputInputObject =
  | Extract<keyof EquipmentUpdateWithoutEquipmentPropertiesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClasses', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassUpdateManyWithoutEquipmentsInput {
  create?: EquipmentClassCreateWithoutEquipmentsInput[]
  delete?: EquipmentClassWhereUniqueInput[]
  connect?: EquipmentClassWhereUniqueInput[]
  set?: EquipmentClassWhereUniqueInput[]
  disconnect?: EquipmentClassWhereUniqueInput[]
  update?: EquipmentClassUpdateWithWhereUniqueWithoutEquipmentsInput[]
  upsert?: EquipmentClassUpsertWithWhereUniqueWithoutEquipmentsInput[]
  deleteMany?: EquipmentClassScalarWhereInput[]
  updateMany?: EquipmentClassUpdateManyWithWhereNestedInput[]
}
export type EquipmentClassUpdateManyWithoutEquipmentsInputInputObject =
  | Extract<keyof EquipmentClassUpdateManyWithoutEquipmentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EquipmentClassUpdateWithWhereUniqueWithoutEquipmentsInput {
  where?: EquipmentClassWhereUniqueInput
  data?: EquipmentClassUpdateWithoutEquipmentsDataInput
}
export type EquipmentClassUpdateWithWhereUniqueWithoutEquipmentsInputInputObject =
  | Extract<keyof EquipmentClassUpdateWithWhereUniqueWithoutEquipmentsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EquipmentClassUpdateWithoutEquipmentsDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipmentClassProperties?: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput | null
  parent?: EquipmentClassUpdateOneWithoutChildrenInput | null
  children?: EquipmentClassUpdateManyWithoutParentInput | null
}
export type EquipmentClassUpdateWithoutEquipmentsDataInputInputObject =
  | Extract<keyof EquipmentClassUpdateWithoutEquipmentsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClassProperties', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassUpdateOneWithoutChildrenInput {
  create?: EquipmentClassCreateWithoutChildrenInput | null
  update?: EquipmentClassUpdateWithoutChildrenDataInput | null
  upsert?: EquipmentClassUpsertWithoutChildrenInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: EquipmentClassWhereUniqueInput | null
}
export type EquipmentClassUpdateOneWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentClassUpdateOneWithoutChildrenInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentClassUpdateWithoutChildrenDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipmentClassProperties?: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput | null
  equipments?: EquipmentUpdateManyWithoutEquipmentClassesInput | null
  parent?: EquipmentClassUpdateOneWithoutChildrenInput | null
}
export type EquipmentClassUpdateWithoutChildrenDataInputInputObject =
  | Extract<keyof EquipmentClassUpdateWithoutChildrenDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClassProperties', alias?: string  } 
  | { name: 'equipments', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  
export interface EquipmentClassUpsertWithoutChildrenInput {
  update?: EquipmentClassUpdateWithoutChildrenDataInput
  create?: EquipmentClassCreateWithoutChildrenInput
}
export type EquipmentClassUpsertWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentClassUpsertWithoutChildrenInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentClassUpdateManyWithoutParentInput {
  create?: EquipmentClassCreateWithoutParentInput[]
  delete?: EquipmentClassWhereUniqueInput[]
  connect?: EquipmentClassWhereUniqueInput[]
  set?: EquipmentClassWhereUniqueInput[]
  disconnect?: EquipmentClassWhereUniqueInput[]
  update?: EquipmentClassUpdateWithWhereUniqueWithoutParentInput[]
  upsert?: EquipmentClassUpsertWithWhereUniqueWithoutParentInput[]
  deleteMany?: EquipmentClassScalarWhereInput[]
  updateMany?: EquipmentClassUpdateManyWithWhereNestedInput[]
}
export type EquipmentClassUpdateManyWithoutParentInputInputObject =
  | Extract<keyof EquipmentClassUpdateManyWithoutParentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EquipmentClassUpdateWithWhereUniqueWithoutParentInput {
  where?: EquipmentClassWhereUniqueInput
  data?: EquipmentClassUpdateWithoutParentDataInput
}
export type EquipmentClassUpdateWithWhereUniqueWithoutParentInputInputObject =
  | Extract<keyof EquipmentClassUpdateWithWhereUniqueWithoutParentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EquipmentClassUpdateWithoutParentDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipmentClassProperties?: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput | null
  equipments?: EquipmentUpdateManyWithoutEquipmentClassesInput | null
  children?: EquipmentClassUpdateManyWithoutParentInput | null
}
export type EquipmentClassUpdateWithoutParentDataInputInputObject =
  | Extract<keyof EquipmentClassUpdateWithoutParentDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClassProperties', alias?: string  } 
  | { name: 'equipments', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassUpsertWithWhereUniqueWithoutParentInput {
  where?: EquipmentClassWhereUniqueInput
  update?: EquipmentClassUpdateWithoutParentDataInput
  create?: EquipmentClassCreateWithoutParentInput
}
export type EquipmentClassUpsertWithWhereUniqueWithoutParentInputInputObject =
  | Extract<keyof EquipmentClassUpsertWithWhereUniqueWithoutParentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentClassScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  AND?: EquipmentClassScalarWhereInput[]
  OR?: EquipmentClassScalarWhereInput[]
  NOT?: EquipmentClassScalarWhereInput[]
}
export type EquipmentClassScalarWhereInputInputObject =
  | Extract<keyof EquipmentClassScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentClassUpdateManyWithWhereNestedInput {
  where?: EquipmentClassScalarWhereInput
  data?: EquipmentClassUpdateManyDataInput
}
export type EquipmentClassUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EquipmentClassUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EquipmentClassUpdateManyDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
}
export type EquipmentClassUpdateManyDataInputInputObject =
  | Extract<keyof EquipmentClassUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface EquipmentClassUpsertWithWhereUniqueWithoutEquipmentsInput {
  where?: EquipmentClassWhereUniqueInput
  update?: EquipmentClassUpdateWithoutEquipmentsDataInput
  create?: EquipmentClassCreateWithoutEquipmentsInput
}
export type EquipmentClassUpsertWithWhereUniqueWithoutEquipmentsInputInputObject =
  | Extract<keyof EquipmentClassUpsertWithWhereUniqueWithoutEquipmentsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentUpdateOneWithoutChildrenInput {
  create?: EquipmentCreateWithoutChildrenInput | null
  update?: EquipmentUpdateWithoutChildrenDataInput | null
  upsert?: EquipmentUpsertWithoutChildrenInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: EquipmentWhereUniqueInput | null
}
export type EquipmentUpdateOneWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentUpdateOneWithoutChildrenInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentUpdateWithoutChildrenDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipmentProperties?: EquipmentPropertyUpdateManyWithoutEquipmentInput | null
  equipmentClasses?: EquipmentClassUpdateManyWithoutEquipmentsInput | null
  parent?: EquipmentUpdateOneWithoutChildrenInput | null
}
export type EquipmentUpdateWithoutChildrenDataInputInputObject =
  | Extract<keyof EquipmentUpdateWithoutChildrenDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentProperties', alias?: string  } 
  | { name: 'equipmentClasses', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  
export interface EquipmentUpsertWithoutChildrenInput {
  update?: EquipmentUpdateWithoutChildrenDataInput
  create?: EquipmentCreateWithoutChildrenInput
}
export type EquipmentUpsertWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentUpsertWithoutChildrenInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentUpdateManyWithoutParentInput {
  create?: EquipmentCreateWithoutParentInput[]
  delete?: EquipmentWhereUniqueInput[]
  connect?: EquipmentWhereUniqueInput[]
  set?: EquipmentWhereUniqueInput[]
  disconnect?: EquipmentWhereUniqueInput[]
  update?: EquipmentUpdateWithWhereUniqueWithoutParentInput[]
  upsert?: EquipmentUpsertWithWhereUniqueWithoutParentInput[]
  deleteMany?: EquipmentScalarWhereInput[]
  updateMany?: EquipmentUpdateManyWithWhereNestedInput[]
}
export type EquipmentUpdateManyWithoutParentInputInputObject =
  | Extract<keyof EquipmentUpdateManyWithoutParentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EquipmentUpdateWithWhereUniqueWithoutParentInput {
  where?: EquipmentWhereUniqueInput
  data?: EquipmentUpdateWithoutParentDataInput
}
export type EquipmentUpdateWithWhereUniqueWithoutParentInputInputObject =
  | Extract<keyof EquipmentUpdateWithWhereUniqueWithoutParentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EquipmentUpdateWithoutParentDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipmentProperties?: EquipmentPropertyUpdateManyWithoutEquipmentInput | null
  equipmentClasses?: EquipmentClassUpdateManyWithoutEquipmentsInput | null
  children?: EquipmentUpdateManyWithoutParentInput | null
}
export type EquipmentUpdateWithoutParentDataInputInputObject =
  | Extract<keyof EquipmentUpdateWithoutParentDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentProperties', alias?: string  } 
  | { name: 'equipmentClasses', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentUpsertWithWhereUniqueWithoutParentInput {
  where?: EquipmentWhereUniqueInput
  update?: EquipmentUpdateWithoutParentDataInput
  create?: EquipmentCreateWithoutParentInput
}
export type EquipmentUpsertWithWhereUniqueWithoutParentInputInputObject =
  | Extract<keyof EquipmentUpsertWithWhereUniqueWithoutParentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  AND?: EquipmentScalarWhereInput[]
  OR?: EquipmentScalarWhereInput[]
  NOT?: EquipmentScalarWhereInput[]
}
export type EquipmentScalarWhereInputInputObject =
  | Extract<keyof EquipmentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentUpdateManyWithWhereNestedInput {
  where?: EquipmentScalarWhereInput
  data?: EquipmentUpdateManyDataInput
}
export type EquipmentUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EquipmentUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EquipmentUpdateManyDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
}
export type EquipmentUpdateManyDataInputInputObject =
  | Extract<keyof EquipmentUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface EquipmentUpsertWithoutEquipmentPropertiesInput {
  update?: EquipmentUpdateWithoutEquipmentPropertiesDataInput
  create?: EquipmentCreateWithoutEquipmentPropertiesInput
}
export type EquipmentUpsertWithoutEquipmentPropertiesInputInputObject =
  | Extract<keyof EquipmentUpsertWithoutEquipmentPropertiesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentPropertyUpsertWithoutChildrenInput {
  update?: EquipmentPropertyUpdateWithoutChildrenDataInput
  create?: EquipmentPropertyCreateWithoutChildrenInput
}
export type EquipmentPropertyUpsertWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentPropertyUpsertWithoutChildrenInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentPropertyUpdateManyWithoutParentInput {
  create?: EquipmentPropertyCreateWithoutParentInput[]
  delete?: EquipmentPropertyWhereUniqueInput[]
  connect?: EquipmentPropertyWhereUniqueInput[]
  set?: EquipmentPropertyWhereUniqueInput[]
  disconnect?: EquipmentPropertyWhereUniqueInput[]
  update?: EquipmentPropertyUpdateWithWhereUniqueWithoutParentInput[]
  upsert?: EquipmentPropertyUpsertWithWhereUniqueWithoutParentInput[]
  deleteMany?: EquipmentPropertyScalarWhereInput[]
  updateMany?: EquipmentPropertyUpdateManyWithWhereNestedInput[]
}
export type EquipmentPropertyUpdateManyWithoutParentInputInputObject =
  | Extract<keyof EquipmentPropertyUpdateManyWithoutParentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EquipmentPropertyUpdateWithWhereUniqueWithoutParentInput {
  where?: EquipmentPropertyWhereUniqueInput
  data?: EquipmentPropertyUpdateWithoutParentDataInput
}
export type EquipmentPropertyUpdateWithWhereUniqueWithoutParentInputInputObject =
  | Extract<keyof EquipmentPropertyUpdateWithWhereUniqueWithoutParentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EquipmentPropertyUpdateWithoutParentDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipment?: EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput | null
  children?: EquipmentPropertyUpdateManyWithoutParentInput | null
}
export type EquipmentPropertyUpdateWithoutParentDataInputInputObject =
  | Extract<keyof EquipmentPropertyUpdateWithoutParentDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipment', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentPropertyUpsertWithWhereUniqueWithoutParentInput {
  where?: EquipmentPropertyWhereUniqueInput
  update?: EquipmentPropertyUpdateWithoutParentDataInput
  create?: EquipmentPropertyCreateWithoutParentInput
}
export type EquipmentPropertyUpsertWithWhereUniqueWithoutParentInputInputObject =
  | Extract<keyof EquipmentPropertyUpsertWithWhereUniqueWithoutParentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentPropertyScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  AND?: EquipmentPropertyScalarWhereInput[]
  OR?: EquipmentPropertyScalarWhereInput[]
  NOT?: EquipmentPropertyScalarWhereInput[]
}
export type EquipmentPropertyScalarWhereInputInputObject =
  | Extract<keyof EquipmentPropertyScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentPropertyUpdateManyWithWhereNestedInput {
  where?: EquipmentPropertyScalarWhereInput
  data?: EquipmentPropertyUpdateManyDataInput
}
export type EquipmentPropertyUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EquipmentPropertyUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EquipmentPropertyUpdateManyDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
}
export type EquipmentPropertyUpdateManyDataInputInputObject =
  | Extract<keyof EquipmentPropertyUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface EquipmentPropertyUpsertWithWhereUniqueWithoutEquipmentInput {
  where?: EquipmentPropertyWhereUniqueInput
  update?: EquipmentPropertyUpdateWithoutEquipmentDataInput
  create?: EquipmentPropertyCreateWithoutEquipmentInput
}
export type EquipmentPropertyUpsertWithWhereUniqueWithoutEquipmentInputInputObject =
  | Extract<keyof EquipmentPropertyUpsertWithWhereUniqueWithoutEquipmentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentUpsertWithWhereUniqueWithoutEquipmentClassesInput {
  where?: EquipmentWhereUniqueInput
  update?: EquipmentUpdateWithoutEquipmentClassesDataInput
  create?: EquipmentCreateWithoutEquipmentClassesInput
}
export type EquipmentUpsertWithWhereUniqueWithoutEquipmentClassesInputInputObject =
  | Extract<keyof EquipmentUpsertWithWhereUniqueWithoutEquipmentClassesInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentClassUpsertWithoutEquipmentClassPropertiesInput {
  update?: EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInput
  create?: EquipmentClassCreateWithoutEquipmentClassPropertiesInput
}
export type EquipmentClassUpsertWithoutEquipmentClassPropertiesInputInputObject =
  | Extract<keyof EquipmentClassUpsertWithoutEquipmentClassPropertiesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentClassPropertyUpsertWithoutChildrenInput {
  update?: EquipmentClassPropertyUpdateWithoutChildrenDataInput
  create?: EquipmentClassPropertyCreateWithoutChildrenInput
}
export type EquipmentClassPropertyUpsertWithoutChildrenInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpsertWithoutChildrenInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentClassPropertyUpdateManyWithoutParentInput {
  create?: EquipmentClassPropertyCreateWithoutParentInput[]
  delete?: EquipmentClassPropertyWhereUniqueInput[]
  connect?: EquipmentClassPropertyWhereUniqueInput[]
  set?: EquipmentClassPropertyWhereUniqueInput[]
  disconnect?: EquipmentClassPropertyWhereUniqueInput[]
  update?: EquipmentClassPropertyUpdateWithWhereUniqueWithoutParentInput[]
  upsert?: EquipmentClassPropertyUpsertWithWhereUniqueWithoutParentInput[]
  deleteMany?: EquipmentClassPropertyScalarWhereInput[]
  updateMany?: EquipmentClassPropertyUpdateManyWithWhereNestedInput[]
}
export type EquipmentClassPropertyUpdateManyWithoutParentInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpdateManyWithoutParentInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface EquipmentClassPropertyUpdateWithWhereUniqueWithoutParentInput {
  where?: EquipmentClassPropertyWhereUniqueInput
  data?: EquipmentClassPropertyUpdateWithoutParentDataInput
}
export type EquipmentClassPropertyUpdateWithWhereUniqueWithoutParentInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpdateWithWhereUniqueWithoutParentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EquipmentClassPropertyUpdateWithoutParentDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipmentClass?: EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput | null
  children?: EquipmentClassPropertyUpdateManyWithoutParentInput | null
}
export type EquipmentClassPropertyUpdateWithoutParentDataInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpdateWithoutParentDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClass', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassPropertyUpsertWithWhereUniqueWithoutParentInput {
  where?: EquipmentClassPropertyWhereUniqueInput
  update?: EquipmentClassPropertyUpdateWithoutParentDataInput
  create?: EquipmentClassPropertyCreateWithoutParentInput
}
export type EquipmentClassPropertyUpsertWithWhereUniqueWithoutParentInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpsertWithWhereUniqueWithoutParentInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentClassPropertyScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  code?: string | null
  code_not?: string | null
  code_in?: string[]
  code_not_in?: string[]
  code_lt?: string | null
  code_lte?: string | null
  code_gt?: string | null
  code_gte?: string | null
  code_contains?: string | null
  code_not_contains?: string | null
  code_starts_with?: string | null
  code_not_starts_with?: string | null
  code_ends_with?: string | null
  code_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  AND?: EquipmentClassPropertyScalarWhereInput[]
  OR?: EquipmentClassPropertyScalarWhereInput[]
  NOT?: EquipmentClassPropertyScalarWhereInput[]
}
export type EquipmentClassPropertyScalarWhereInputInputObject =
  | Extract<keyof EquipmentClassPropertyScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'code_not', alias?: string  } 
  | { name: 'code_in', alias?: string  } 
  | { name: 'code_not_in', alias?: string  } 
  | { name: 'code_lt', alias?: string  } 
  | { name: 'code_lte', alias?: string  } 
  | { name: 'code_gt', alias?: string  } 
  | { name: 'code_gte', alias?: string  } 
  | { name: 'code_contains', alias?: string  } 
  | { name: 'code_not_contains', alias?: string  } 
  | { name: 'code_starts_with', alias?: string  } 
  | { name: 'code_not_starts_with', alias?: string  } 
  | { name: 'code_ends_with', alias?: string  } 
  | { name: 'code_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentClassPropertyUpdateManyWithWhereNestedInput {
  where?: EquipmentClassPropertyScalarWhereInput
  data?: EquipmentClassPropertyUpdateManyDataInput
}
export type EquipmentClassPropertyUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface EquipmentClassPropertyUpdateManyDataInput {
  name?: string | null
  code?: string | null
  description?: string | null
}
export type EquipmentClassPropertyUpdateManyDataInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface EquipmentClassPropertyUpsertWithWhereUniqueWithoutEquipmentClassInput {
  where?: EquipmentClassPropertyWhereUniqueInput
  update?: EquipmentClassPropertyUpdateWithoutEquipmentClassDataInput
  create?: EquipmentClassPropertyCreateWithoutEquipmentClassInput
}
export type EquipmentClassPropertyUpsertWithWhereUniqueWithoutEquipmentClassInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpsertWithWhereUniqueWithoutEquipmentClassInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EquipmentClassUpdateManyMutationInput {
  name?: string | null
  code?: string | null
  description?: string | null
}
export type EquipmentClassUpdateManyMutationInputInputObject =
  | Extract<keyof EquipmentClassUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface EquipmentClassPropertyCreateInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipmentClass?: EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput
  parent?: EquipmentClassPropertyCreateOneWithoutChildrenInput | null
  children?: EquipmentClassPropertyCreateManyWithoutParentInput | null
}
export type EquipmentClassPropertyCreateInputInputObject =
  | Extract<keyof EquipmentClassPropertyCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClass', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassPropertyUpdateInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipmentClass?: EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput | null
  parent?: EquipmentClassPropertyUpdateOneWithoutChildrenInput | null
  children?: EquipmentClassPropertyUpdateManyWithoutParentInput | null
}
export type EquipmentClassPropertyUpdateInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentClass', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentClassPropertyUpdateManyMutationInput {
  name?: string | null
  code?: string | null
  description?: string | null
}
export type EquipmentClassPropertyUpdateManyMutationInputInputObject =
  | Extract<keyof EquipmentClassPropertyUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface EquipmentCreateInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipmentProperties?: EquipmentPropertyCreateManyWithoutEquipmentInput | null
  equipmentClasses?: EquipmentClassCreateManyWithoutEquipmentsInput | null
  parent?: EquipmentCreateOneWithoutChildrenInput | null
  children?: EquipmentCreateManyWithoutParentInput | null
}
export type EquipmentCreateInputInputObject =
  | Extract<keyof EquipmentCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentProperties', alias?: string  } 
  | { name: 'equipmentClasses', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentUpdateInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipmentProperties?: EquipmentPropertyUpdateManyWithoutEquipmentInput | null
  equipmentClasses?: EquipmentClassUpdateManyWithoutEquipmentsInput | null
  parent?: EquipmentUpdateOneWithoutChildrenInput | null
  children?: EquipmentUpdateManyWithoutParentInput | null
}
export type EquipmentUpdateInputInputObject =
  | Extract<keyof EquipmentUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipmentProperties', alias?: string  } 
  | { name: 'equipmentClasses', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentUpdateManyMutationInput {
  name?: string | null
  code?: string | null
  description?: string | null
}
export type EquipmentUpdateManyMutationInputInputObject =
  | Extract<keyof EquipmentUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface EquipmentPropertyCreateInput {
  id?: string | null
  name?: string
  code?: string | null
  description?: string | null
  equipment?: EquipmentCreateOneWithoutEquipmentPropertiesInput
  parent?: EquipmentPropertyCreateOneWithoutChildrenInput | null
  children?: EquipmentPropertyCreateManyWithoutParentInput | null
}
export type EquipmentPropertyCreateInputInputObject =
  | Extract<keyof EquipmentPropertyCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipment', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentPropertyUpdateInput {
  name?: string | null
  code?: string | null
  description?: string | null
  equipment?: EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput | null
  parent?: EquipmentPropertyUpdateOneWithoutChildrenInput | null
  children?: EquipmentPropertyUpdateManyWithoutParentInput | null
}
export type EquipmentPropertyUpdateInputInputObject =
  | Extract<keyof EquipmentPropertyUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'equipment', alias?: string  } 
  | { name: 'parent', alias?: string  } 
  | { name: 'children', alias?: string  } 
  
export interface EquipmentPropertyUpdateManyMutationInput {
  name?: string | null
  code?: string | null
  description?: string | null
}
export type EquipmentPropertyUpdateManyMutationInputInputObject =
  | Extract<keyof EquipmentPropertyUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'code', alias?: string  } 
  | { name: 'description', alias?: string  } 
  
export interface EquipmentClassMappingCreateInput {
  equipmentClass?: EquipmentClassCreateOneInput | null
  equipment?: EquipmentCreateOneInput | null
}
export type EquipmentClassMappingCreateInputInputObject =
  | Extract<keyof EquipmentClassMappingCreateInput, string>
  | { name: 'equipmentClass', alias?: string  } 
  | { name: 'equipment', alias?: string  } 
  
export interface EquipmentClassCreateOneInput {
  create?: EquipmentClassCreateInput | null
  connect?: EquipmentClassWhereUniqueInput | null
}
export type EquipmentClassCreateOneInputInputObject =
  | Extract<keyof EquipmentClassCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentCreateOneInput {
  create?: EquipmentCreateInput | null
  connect?: EquipmentWhereUniqueInput | null
}
export type EquipmentCreateOneInputInputObject =
  | Extract<keyof EquipmentCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EquipmentClassSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EquipmentClassWhereInput | null
  AND?: EquipmentClassSubscriptionWhereInput[]
  OR?: EquipmentClassSubscriptionWhereInput[]
  NOT?: EquipmentClassSubscriptionWhereInput[]
}
export type EquipmentClassSubscriptionWhereInputInputObject =
  | Extract<keyof EquipmentClassSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentClassPropertySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EquipmentClassPropertyWhereInput | null
  AND?: EquipmentClassPropertySubscriptionWhereInput[]
  OR?: EquipmentClassPropertySubscriptionWhereInput[]
  NOT?: EquipmentClassPropertySubscriptionWhereInput[]
}
export type EquipmentClassPropertySubscriptionWhereInputInputObject =
  | Extract<keyof EquipmentClassPropertySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EquipmentWhereInput | null
  AND?: EquipmentSubscriptionWhereInput[]
  OR?: EquipmentSubscriptionWhereInput[]
  NOT?: EquipmentSubscriptionWhereInput[]
}
export type EquipmentSubscriptionWhereInputInputObject =
  | Extract<keyof EquipmentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentPropertySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EquipmentPropertyWhereInput | null
  AND?: EquipmentPropertySubscriptionWhereInput[]
  OR?: EquipmentPropertySubscriptionWhereInput[]
  NOT?: EquipmentPropertySubscriptionWhereInput[]
}
export type EquipmentPropertySubscriptionWhereInputInputObject =
  | Extract<keyof EquipmentPropertySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EquipmentClassMappingSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EquipmentClassMappingWhereInput | null
  AND?: EquipmentClassMappingSubscriptionWhereInput[]
  OR?: EquipmentClassMappingSubscriptionWhereInput[]
  NOT?: EquipmentClassMappingSubscriptionWhereInput[]
}
export type EquipmentClassMappingSubscriptionWhereInputInputObject =
  | Extract<keyof EquipmentClassMappingSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type EquipmentClassPropertyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'code_ASC'
  | 'code_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type EquipmentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'code_ASC'
  | 'code_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type EquipmentPropertyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'code_ASC'
  | 'code_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type EquipmentClassOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'code_ASC'
  | 'code_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type EquipmentClassMappingOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  