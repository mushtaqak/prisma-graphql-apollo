// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateEquipment {
  count: Int!
}

type AggregateEquipmentClass {
  count: Int!
}

type AggregateEquipmentClassProperty {
  count: Int!
}

type AggregateEquipmentProperty {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Equipment {
  id: ID!
  name: String!
  code: String
  description: String
  equipmentProperties(where: EquipmentPropertyWhereInput, orderBy: EquipmentPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EquipmentProperty!]
  equipmentClasses(where: EquipmentClassWhereInput, orderBy: EquipmentClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EquipmentClass!]
  parent: Equipment
  children(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equipment!]
}

type EquipmentClass {
  id: ID!
  name: String!
  code: String
  description: String
  equipmentClassProperties(where: EquipmentClassPropertyWhereInput, orderBy: EquipmentClassPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EquipmentClassProperty!]
  equipments(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equipment!]
  parent: EquipmentClass
  children(where: EquipmentClassWhereInput, orderBy: EquipmentClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EquipmentClass!]
}

type EquipmentClassConnection {
  pageInfo: PageInfo!
  edges: [EquipmentClassEdge]!
  aggregate: AggregateEquipmentClass!
}

input EquipmentClassCreateInput {
  id: ID
  name: String!
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyCreateManyWithoutEquipmentClassInput
  equipments: EquipmentCreateManyWithoutEquipmentClassesInput
  parent: EquipmentClassCreateOneWithoutChildrenInput
  children: EquipmentClassCreateManyWithoutParentInput
}

input EquipmentClassCreateManyWithoutEquipmentsInput {
  create: [EquipmentClassCreateWithoutEquipmentsInput!]
  connect: [EquipmentClassWhereUniqueInput!]
}

input EquipmentClassCreateManyWithoutParentInput {
  create: [EquipmentClassCreateWithoutParentInput!]
  connect: [EquipmentClassWhereUniqueInput!]
}

input EquipmentClassCreateOneWithoutChildrenInput {
  create: EquipmentClassCreateWithoutChildrenInput
  connect: EquipmentClassWhereUniqueInput
}

input EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput {
  create: EquipmentClassCreateWithoutEquipmentClassPropertiesInput
  connect: EquipmentClassWhereUniqueInput
}

input EquipmentClassCreateWithoutChildrenInput {
  id: ID
  name: String!
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyCreateManyWithoutEquipmentClassInput
  equipments: EquipmentCreateManyWithoutEquipmentClassesInput
  parent: EquipmentClassCreateOneWithoutChildrenInput
}

input EquipmentClassCreateWithoutEquipmentClassPropertiesInput {
  id: ID
  name: String!
  code: String
  description: String
  equipments: EquipmentCreateManyWithoutEquipmentClassesInput
  parent: EquipmentClassCreateOneWithoutChildrenInput
  children: EquipmentClassCreateManyWithoutParentInput
}

input EquipmentClassCreateWithoutEquipmentsInput {
  id: ID
  name: String!
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyCreateManyWithoutEquipmentClassInput
  parent: EquipmentClassCreateOneWithoutChildrenInput
  children: EquipmentClassCreateManyWithoutParentInput
}

input EquipmentClassCreateWithoutParentInput {
  id: ID
  name: String!
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyCreateManyWithoutEquipmentClassInput
  equipments: EquipmentCreateManyWithoutEquipmentClassesInput
  children: EquipmentClassCreateManyWithoutParentInput
}

type EquipmentClassEdge {
  node: EquipmentClass!
  cursor: String!
}

enum EquipmentClassOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  description_ASC
  description_DESC
}

type EquipmentClassPreviousValues {
  id: ID!
  name: String!
  code: String
  description: String
}

type EquipmentClassProperty {
  id: ID!
  name: String!
  code: String
  description: String
  equipmentClass: EquipmentClass!
  parent: EquipmentClassProperty
  children(where: EquipmentClassPropertyWhereInput, orderBy: EquipmentClassPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EquipmentClassProperty!]
}

type EquipmentClassPropertyConnection {
  pageInfo: PageInfo!
  edges: [EquipmentClassPropertyEdge]!
  aggregate: AggregateEquipmentClassProperty!
}

input EquipmentClassPropertyCreateInput {
  id: ID
  name: String!
  code: String
  description: String
  equipmentClass: EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput!
  parent: EquipmentClassPropertyCreateOneWithoutChildrenInput
  children: EquipmentClassPropertyCreateManyWithoutParentInput
}

input EquipmentClassPropertyCreateManyWithoutEquipmentClassInput {
  create: [EquipmentClassPropertyCreateWithoutEquipmentClassInput!]
  connect: [EquipmentClassPropertyWhereUniqueInput!]
}

input EquipmentClassPropertyCreateManyWithoutParentInput {
  create: [EquipmentClassPropertyCreateWithoutParentInput!]
  connect: [EquipmentClassPropertyWhereUniqueInput!]
}

input EquipmentClassPropertyCreateOneWithoutChildrenInput {
  create: EquipmentClassPropertyCreateWithoutChildrenInput
  connect: EquipmentClassPropertyWhereUniqueInput
}

input EquipmentClassPropertyCreateWithoutChildrenInput {
  id: ID
  name: String!
  code: String
  description: String
  equipmentClass: EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput!
  parent: EquipmentClassPropertyCreateOneWithoutChildrenInput
}

input EquipmentClassPropertyCreateWithoutEquipmentClassInput {
  id: ID
  name: String!
  code: String
  description: String
  parent: EquipmentClassPropertyCreateOneWithoutChildrenInput
  children: EquipmentClassPropertyCreateManyWithoutParentInput
}

input EquipmentClassPropertyCreateWithoutParentInput {
  id: ID
  name: String!
  code: String
  description: String
  equipmentClass: EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput!
  children: EquipmentClassPropertyCreateManyWithoutParentInput
}

type EquipmentClassPropertyEdge {
  node: EquipmentClassProperty!
  cursor: String!
}

enum EquipmentClassPropertyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  description_ASC
  description_DESC
}

type EquipmentClassPropertyPreviousValues {
  id: ID!
  name: String!
  code: String
  description: String
}

input EquipmentClassPropertyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [EquipmentClassPropertyScalarWhereInput!]
  OR: [EquipmentClassPropertyScalarWhereInput!]
  NOT: [EquipmentClassPropertyScalarWhereInput!]
}

type EquipmentClassPropertySubscriptionPayload {
  mutation: MutationType!
  node: EquipmentClassProperty
  updatedFields: [String!]
  previousValues: EquipmentClassPropertyPreviousValues
}

input EquipmentClassPropertySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EquipmentClassPropertyWhereInput
  AND: [EquipmentClassPropertySubscriptionWhereInput!]
  OR: [EquipmentClassPropertySubscriptionWhereInput!]
  NOT: [EquipmentClassPropertySubscriptionWhereInput!]
}

input EquipmentClassPropertyUpdateInput {
  name: String
  code: String
  description: String
  equipmentClass: EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput
  parent: EquipmentClassPropertyUpdateOneWithoutChildrenInput
  children: EquipmentClassPropertyUpdateManyWithoutParentInput
}

input EquipmentClassPropertyUpdateManyDataInput {
  name: String
  code: String
  description: String
}

input EquipmentClassPropertyUpdateManyMutationInput {
  name: String
  code: String
  description: String
}

input EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput {
  create: [EquipmentClassPropertyCreateWithoutEquipmentClassInput!]
  delete: [EquipmentClassPropertyWhereUniqueInput!]
  connect: [EquipmentClassPropertyWhereUniqueInput!]
  set: [EquipmentClassPropertyWhereUniqueInput!]
  disconnect: [EquipmentClassPropertyWhereUniqueInput!]
  update: [EquipmentClassPropertyUpdateWithWhereUniqueWithoutEquipmentClassInput!]
  upsert: [EquipmentClassPropertyUpsertWithWhereUniqueWithoutEquipmentClassInput!]
  deleteMany: [EquipmentClassPropertyScalarWhereInput!]
  updateMany: [EquipmentClassPropertyUpdateManyWithWhereNestedInput!]
}

input EquipmentClassPropertyUpdateManyWithoutParentInput {
  create: [EquipmentClassPropertyCreateWithoutParentInput!]
  delete: [EquipmentClassPropertyWhereUniqueInput!]
  connect: [EquipmentClassPropertyWhereUniqueInput!]
  set: [EquipmentClassPropertyWhereUniqueInput!]
  disconnect: [EquipmentClassPropertyWhereUniqueInput!]
  update: [EquipmentClassPropertyUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [EquipmentClassPropertyUpsertWithWhereUniqueWithoutParentInput!]
  deleteMany: [EquipmentClassPropertyScalarWhereInput!]
  updateMany: [EquipmentClassPropertyUpdateManyWithWhereNestedInput!]
}

input EquipmentClassPropertyUpdateManyWithWhereNestedInput {
  where: EquipmentClassPropertyScalarWhereInput!
  data: EquipmentClassPropertyUpdateManyDataInput!
}

input EquipmentClassPropertyUpdateOneWithoutChildrenInput {
  create: EquipmentClassPropertyCreateWithoutChildrenInput
  update: EquipmentClassPropertyUpdateWithoutChildrenDataInput
  upsert: EquipmentClassPropertyUpsertWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  connect: EquipmentClassPropertyWhereUniqueInput
}

input EquipmentClassPropertyUpdateWithoutChildrenDataInput {
  name: String
  code: String
  description: String
  equipmentClass: EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput
  parent: EquipmentClassPropertyUpdateOneWithoutChildrenInput
}

input EquipmentClassPropertyUpdateWithoutEquipmentClassDataInput {
  name: String
  code: String
  description: String
  parent: EquipmentClassPropertyUpdateOneWithoutChildrenInput
  children: EquipmentClassPropertyUpdateManyWithoutParentInput
}

input EquipmentClassPropertyUpdateWithoutParentDataInput {
  name: String
  code: String
  description: String
  equipmentClass: EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput
  children: EquipmentClassPropertyUpdateManyWithoutParentInput
}

input EquipmentClassPropertyUpdateWithWhereUniqueWithoutEquipmentClassInput {
  where: EquipmentClassPropertyWhereUniqueInput!
  data: EquipmentClassPropertyUpdateWithoutEquipmentClassDataInput!
}

input EquipmentClassPropertyUpdateWithWhereUniqueWithoutParentInput {
  where: EquipmentClassPropertyWhereUniqueInput!
  data: EquipmentClassPropertyUpdateWithoutParentDataInput!
}

input EquipmentClassPropertyUpsertWithoutChildrenInput {
  update: EquipmentClassPropertyUpdateWithoutChildrenDataInput!
  create: EquipmentClassPropertyCreateWithoutChildrenInput!
}

input EquipmentClassPropertyUpsertWithWhereUniqueWithoutEquipmentClassInput {
  where: EquipmentClassPropertyWhereUniqueInput!
  update: EquipmentClassPropertyUpdateWithoutEquipmentClassDataInput!
  create: EquipmentClassPropertyCreateWithoutEquipmentClassInput!
}

input EquipmentClassPropertyUpsertWithWhereUniqueWithoutParentInput {
  where: EquipmentClassPropertyWhereUniqueInput!
  update: EquipmentClassPropertyUpdateWithoutParentDataInput!
  create: EquipmentClassPropertyCreateWithoutParentInput!
}

input EquipmentClassPropertyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  equipmentClass: EquipmentClassWhereInput
  parent: EquipmentClassPropertyWhereInput
  children_every: EquipmentClassPropertyWhereInput
  children_some: EquipmentClassPropertyWhereInput
  children_none: EquipmentClassPropertyWhereInput
  AND: [EquipmentClassPropertyWhereInput!]
  OR: [EquipmentClassPropertyWhereInput!]
  NOT: [EquipmentClassPropertyWhereInput!]
}

input EquipmentClassPropertyWhereUniqueInput {
  id: ID
}

input EquipmentClassScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [EquipmentClassScalarWhereInput!]
  OR: [EquipmentClassScalarWhereInput!]
  NOT: [EquipmentClassScalarWhereInput!]
}

type EquipmentClassSubscriptionPayload {
  mutation: MutationType!
  node: EquipmentClass
  updatedFields: [String!]
  previousValues: EquipmentClassPreviousValues
}

input EquipmentClassSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EquipmentClassWhereInput
  AND: [EquipmentClassSubscriptionWhereInput!]
  OR: [EquipmentClassSubscriptionWhereInput!]
  NOT: [EquipmentClassSubscriptionWhereInput!]
}

input EquipmentClassUpdateInput {
  name: String
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput
  equipments: EquipmentUpdateManyWithoutEquipmentClassesInput
  parent: EquipmentClassUpdateOneWithoutChildrenInput
  children: EquipmentClassUpdateManyWithoutParentInput
}

input EquipmentClassUpdateManyDataInput {
  name: String
  code: String
  description: String
}

input EquipmentClassUpdateManyMutationInput {
  name: String
  code: String
  description: String
}

input EquipmentClassUpdateManyWithoutEquipmentsInput {
  create: [EquipmentClassCreateWithoutEquipmentsInput!]
  delete: [EquipmentClassWhereUniqueInput!]
  connect: [EquipmentClassWhereUniqueInput!]
  set: [EquipmentClassWhereUniqueInput!]
  disconnect: [EquipmentClassWhereUniqueInput!]
  update: [EquipmentClassUpdateWithWhereUniqueWithoutEquipmentsInput!]
  upsert: [EquipmentClassUpsertWithWhereUniqueWithoutEquipmentsInput!]
  deleteMany: [EquipmentClassScalarWhereInput!]
  updateMany: [EquipmentClassUpdateManyWithWhereNestedInput!]
}

input EquipmentClassUpdateManyWithoutParentInput {
  create: [EquipmentClassCreateWithoutParentInput!]
  delete: [EquipmentClassWhereUniqueInput!]
  connect: [EquipmentClassWhereUniqueInput!]
  set: [EquipmentClassWhereUniqueInput!]
  disconnect: [EquipmentClassWhereUniqueInput!]
  update: [EquipmentClassUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [EquipmentClassUpsertWithWhereUniqueWithoutParentInput!]
  deleteMany: [EquipmentClassScalarWhereInput!]
  updateMany: [EquipmentClassUpdateManyWithWhereNestedInput!]
}

input EquipmentClassUpdateManyWithWhereNestedInput {
  where: EquipmentClassScalarWhereInput!
  data: EquipmentClassUpdateManyDataInput!
}

input EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput {
  create: EquipmentClassCreateWithoutEquipmentClassPropertiesInput
  update: EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInput
  upsert: EquipmentClassUpsertWithoutEquipmentClassPropertiesInput
  connect: EquipmentClassWhereUniqueInput
}

input EquipmentClassUpdateOneWithoutChildrenInput {
  create: EquipmentClassCreateWithoutChildrenInput
  update: EquipmentClassUpdateWithoutChildrenDataInput
  upsert: EquipmentClassUpsertWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  connect: EquipmentClassWhereUniqueInput
}

input EquipmentClassUpdateWithoutChildrenDataInput {
  name: String
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput
  equipments: EquipmentUpdateManyWithoutEquipmentClassesInput
  parent: EquipmentClassUpdateOneWithoutChildrenInput
}

input EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInput {
  name: String
  code: String
  description: String
  equipments: EquipmentUpdateManyWithoutEquipmentClassesInput
  parent: EquipmentClassUpdateOneWithoutChildrenInput
  children: EquipmentClassUpdateManyWithoutParentInput
}

input EquipmentClassUpdateWithoutEquipmentsDataInput {
  name: String
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput
  parent: EquipmentClassUpdateOneWithoutChildrenInput
  children: EquipmentClassUpdateManyWithoutParentInput
}

input EquipmentClassUpdateWithoutParentDataInput {
  name: String
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput
  equipments: EquipmentUpdateManyWithoutEquipmentClassesInput
  children: EquipmentClassUpdateManyWithoutParentInput
}

input EquipmentClassUpdateWithWhereUniqueWithoutEquipmentsInput {
  where: EquipmentClassWhereUniqueInput!
  data: EquipmentClassUpdateWithoutEquipmentsDataInput!
}

input EquipmentClassUpdateWithWhereUniqueWithoutParentInput {
  where: EquipmentClassWhereUniqueInput!
  data: EquipmentClassUpdateWithoutParentDataInput!
}

input EquipmentClassUpsertWithoutChildrenInput {
  update: EquipmentClassUpdateWithoutChildrenDataInput!
  create: EquipmentClassCreateWithoutChildrenInput!
}

input EquipmentClassUpsertWithoutEquipmentClassPropertiesInput {
  update: EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInput!
  create: EquipmentClassCreateWithoutEquipmentClassPropertiesInput!
}

input EquipmentClassUpsertWithWhereUniqueWithoutEquipmentsInput {
  where: EquipmentClassWhereUniqueInput!
  update: EquipmentClassUpdateWithoutEquipmentsDataInput!
  create: EquipmentClassCreateWithoutEquipmentsInput!
}

input EquipmentClassUpsertWithWhereUniqueWithoutParentInput {
  where: EquipmentClassWhereUniqueInput!
  update: EquipmentClassUpdateWithoutParentDataInput!
  create: EquipmentClassCreateWithoutParentInput!
}

input EquipmentClassWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  equipmentClassProperties_every: EquipmentClassPropertyWhereInput
  equipmentClassProperties_some: EquipmentClassPropertyWhereInput
  equipmentClassProperties_none: EquipmentClassPropertyWhereInput
  equipments_every: EquipmentWhereInput
  equipments_some: EquipmentWhereInput
  equipments_none: EquipmentWhereInput
  parent: EquipmentClassWhereInput
  children_every: EquipmentClassWhereInput
  children_some: EquipmentClassWhereInput
  children_none: EquipmentClassWhereInput
  AND: [EquipmentClassWhereInput!]
  OR: [EquipmentClassWhereInput!]
  NOT: [EquipmentClassWhereInput!]
}

input EquipmentClassWhereUniqueInput {
  id: ID
}

type EquipmentConnection {
  pageInfo: PageInfo!
  edges: [EquipmentEdge]!
  aggregate: AggregateEquipment!
}

input EquipmentCreateInput {
  id: ID
  name: String!
  code: String
  description: String
  equipmentProperties: EquipmentPropertyCreateManyWithoutEquipmentInput
  equipmentClasses: EquipmentClassCreateManyWithoutEquipmentsInput
  parent: EquipmentCreateOneWithoutChildrenInput
  children: EquipmentCreateManyWithoutParentInput
}

input EquipmentCreateManyWithoutEquipmentClassesInput {
  create: [EquipmentCreateWithoutEquipmentClassesInput!]
  connect: [EquipmentWhereUniqueInput!]
}

input EquipmentCreateManyWithoutParentInput {
  create: [EquipmentCreateWithoutParentInput!]
  connect: [EquipmentWhereUniqueInput!]
}

input EquipmentCreateOneWithoutChildrenInput {
  create: EquipmentCreateWithoutChildrenInput
  connect: EquipmentWhereUniqueInput
}

input EquipmentCreateOneWithoutEquipmentPropertiesInput {
  create: EquipmentCreateWithoutEquipmentPropertiesInput
  connect: EquipmentWhereUniqueInput
}

input EquipmentCreateWithoutChildrenInput {
  id: ID
  name: String!
  code: String
  description: String
  equipmentProperties: EquipmentPropertyCreateManyWithoutEquipmentInput
  equipmentClasses: EquipmentClassCreateManyWithoutEquipmentsInput
  parent: EquipmentCreateOneWithoutChildrenInput
}

input EquipmentCreateWithoutEquipmentClassesInput {
  id: ID
  name: String!
  code: String
  description: String
  equipmentProperties: EquipmentPropertyCreateManyWithoutEquipmentInput
  parent: EquipmentCreateOneWithoutChildrenInput
  children: EquipmentCreateManyWithoutParentInput
}

input EquipmentCreateWithoutEquipmentPropertiesInput {
  id: ID
  name: String!
  code: String
  description: String
  equipmentClasses: EquipmentClassCreateManyWithoutEquipmentsInput
  parent: EquipmentCreateOneWithoutChildrenInput
  children: EquipmentCreateManyWithoutParentInput
}

input EquipmentCreateWithoutParentInput {
  id: ID
  name: String!
  code: String
  description: String
  equipmentProperties: EquipmentPropertyCreateManyWithoutEquipmentInput
  equipmentClasses: EquipmentClassCreateManyWithoutEquipmentsInput
  children: EquipmentCreateManyWithoutParentInput
}

type EquipmentEdge {
  node: Equipment!
  cursor: String!
}

enum EquipmentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  description_ASC
  description_DESC
}

type EquipmentPreviousValues {
  id: ID!
  name: String!
  code: String
  description: String
}

type EquipmentProperty {
  id: ID!
  name: String!
  code: String
  description: String
  equipment: Equipment!
  parent: EquipmentProperty
  children(where: EquipmentPropertyWhereInput, orderBy: EquipmentPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EquipmentProperty!]
}

type EquipmentPropertyConnection {
  pageInfo: PageInfo!
  edges: [EquipmentPropertyEdge]!
  aggregate: AggregateEquipmentProperty!
}

input EquipmentPropertyCreateInput {
  id: ID
  name: String!
  code: String
  description: String
  equipment: EquipmentCreateOneWithoutEquipmentPropertiesInput!
  parent: EquipmentPropertyCreateOneWithoutChildrenInput
  children: EquipmentPropertyCreateManyWithoutParentInput
}

input EquipmentPropertyCreateManyWithoutEquipmentInput {
  create: [EquipmentPropertyCreateWithoutEquipmentInput!]
  connect: [EquipmentPropertyWhereUniqueInput!]
}

input EquipmentPropertyCreateManyWithoutParentInput {
  create: [EquipmentPropertyCreateWithoutParentInput!]
  connect: [EquipmentPropertyWhereUniqueInput!]
}

input EquipmentPropertyCreateOneWithoutChildrenInput {
  create: EquipmentPropertyCreateWithoutChildrenInput
  connect: EquipmentPropertyWhereUniqueInput
}

input EquipmentPropertyCreateWithoutChildrenInput {
  id: ID
  name: String!
  code: String
  description: String
  equipment: EquipmentCreateOneWithoutEquipmentPropertiesInput!
  parent: EquipmentPropertyCreateOneWithoutChildrenInput
}

input EquipmentPropertyCreateWithoutEquipmentInput {
  id: ID
  name: String!
  code: String
  description: String
  parent: EquipmentPropertyCreateOneWithoutChildrenInput
  children: EquipmentPropertyCreateManyWithoutParentInput
}

input EquipmentPropertyCreateWithoutParentInput {
  id: ID
  name: String!
  code: String
  description: String
  equipment: EquipmentCreateOneWithoutEquipmentPropertiesInput!
  children: EquipmentPropertyCreateManyWithoutParentInput
}

type EquipmentPropertyEdge {
  node: EquipmentProperty!
  cursor: String!
}

enum EquipmentPropertyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  description_ASC
  description_DESC
}

type EquipmentPropertyPreviousValues {
  id: ID!
  name: String!
  code: String
  description: String
}

input EquipmentPropertyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [EquipmentPropertyScalarWhereInput!]
  OR: [EquipmentPropertyScalarWhereInput!]
  NOT: [EquipmentPropertyScalarWhereInput!]
}

type EquipmentPropertySubscriptionPayload {
  mutation: MutationType!
  node: EquipmentProperty
  updatedFields: [String!]
  previousValues: EquipmentPropertyPreviousValues
}

input EquipmentPropertySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EquipmentPropertyWhereInput
  AND: [EquipmentPropertySubscriptionWhereInput!]
  OR: [EquipmentPropertySubscriptionWhereInput!]
  NOT: [EquipmentPropertySubscriptionWhereInput!]
}

input EquipmentPropertyUpdateInput {
  name: String
  code: String
  description: String
  equipment: EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput
  parent: EquipmentPropertyUpdateOneWithoutChildrenInput
  children: EquipmentPropertyUpdateManyWithoutParentInput
}

input EquipmentPropertyUpdateManyDataInput {
  name: String
  code: String
  description: String
}

input EquipmentPropertyUpdateManyMutationInput {
  name: String
  code: String
  description: String
}

input EquipmentPropertyUpdateManyWithoutEquipmentInput {
  create: [EquipmentPropertyCreateWithoutEquipmentInput!]
  delete: [EquipmentPropertyWhereUniqueInput!]
  connect: [EquipmentPropertyWhereUniqueInput!]
  set: [EquipmentPropertyWhereUniqueInput!]
  disconnect: [EquipmentPropertyWhereUniqueInput!]
  update: [EquipmentPropertyUpdateWithWhereUniqueWithoutEquipmentInput!]
  upsert: [EquipmentPropertyUpsertWithWhereUniqueWithoutEquipmentInput!]
  deleteMany: [EquipmentPropertyScalarWhereInput!]
  updateMany: [EquipmentPropertyUpdateManyWithWhereNestedInput!]
}

input EquipmentPropertyUpdateManyWithoutParentInput {
  create: [EquipmentPropertyCreateWithoutParentInput!]
  delete: [EquipmentPropertyWhereUniqueInput!]
  connect: [EquipmentPropertyWhereUniqueInput!]
  set: [EquipmentPropertyWhereUniqueInput!]
  disconnect: [EquipmentPropertyWhereUniqueInput!]
  update: [EquipmentPropertyUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [EquipmentPropertyUpsertWithWhereUniqueWithoutParentInput!]
  deleteMany: [EquipmentPropertyScalarWhereInput!]
  updateMany: [EquipmentPropertyUpdateManyWithWhereNestedInput!]
}

input EquipmentPropertyUpdateManyWithWhereNestedInput {
  where: EquipmentPropertyScalarWhereInput!
  data: EquipmentPropertyUpdateManyDataInput!
}

input EquipmentPropertyUpdateOneWithoutChildrenInput {
  create: EquipmentPropertyCreateWithoutChildrenInput
  update: EquipmentPropertyUpdateWithoutChildrenDataInput
  upsert: EquipmentPropertyUpsertWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  connect: EquipmentPropertyWhereUniqueInput
}

input EquipmentPropertyUpdateWithoutChildrenDataInput {
  name: String
  code: String
  description: String
  equipment: EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput
  parent: EquipmentPropertyUpdateOneWithoutChildrenInput
}

input EquipmentPropertyUpdateWithoutEquipmentDataInput {
  name: String
  code: String
  description: String
  parent: EquipmentPropertyUpdateOneWithoutChildrenInput
  children: EquipmentPropertyUpdateManyWithoutParentInput
}

input EquipmentPropertyUpdateWithoutParentDataInput {
  name: String
  code: String
  description: String
  equipment: EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput
  children: EquipmentPropertyUpdateManyWithoutParentInput
}

input EquipmentPropertyUpdateWithWhereUniqueWithoutEquipmentInput {
  where: EquipmentPropertyWhereUniqueInput!
  data: EquipmentPropertyUpdateWithoutEquipmentDataInput!
}

input EquipmentPropertyUpdateWithWhereUniqueWithoutParentInput {
  where: EquipmentPropertyWhereUniqueInput!
  data: EquipmentPropertyUpdateWithoutParentDataInput!
}

input EquipmentPropertyUpsertWithoutChildrenInput {
  update: EquipmentPropertyUpdateWithoutChildrenDataInput!
  create: EquipmentPropertyCreateWithoutChildrenInput!
}

input EquipmentPropertyUpsertWithWhereUniqueWithoutEquipmentInput {
  where: EquipmentPropertyWhereUniqueInput!
  update: EquipmentPropertyUpdateWithoutEquipmentDataInput!
  create: EquipmentPropertyCreateWithoutEquipmentInput!
}

input EquipmentPropertyUpsertWithWhereUniqueWithoutParentInput {
  where: EquipmentPropertyWhereUniqueInput!
  update: EquipmentPropertyUpdateWithoutParentDataInput!
  create: EquipmentPropertyCreateWithoutParentInput!
}

input EquipmentPropertyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  equipment: EquipmentWhereInput
  parent: EquipmentPropertyWhereInput
  children_every: EquipmentPropertyWhereInput
  children_some: EquipmentPropertyWhereInput
  children_none: EquipmentPropertyWhereInput
  AND: [EquipmentPropertyWhereInput!]
  OR: [EquipmentPropertyWhereInput!]
  NOT: [EquipmentPropertyWhereInput!]
}

input EquipmentPropertyWhereUniqueInput {
  id: ID
}

input EquipmentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [EquipmentScalarWhereInput!]
  OR: [EquipmentScalarWhereInput!]
  NOT: [EquipmentScalarWhereInput!]
}

type EquipmentSubscriptionPayload {
  mutation: MutationType!
  node: Equipment
  updatedFields: [String!]
  previousValues: EquipmentPreviousValues
}

input EquipmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EquipmentWhereInput
  AND: [EquipmentSubscriptionWhereInput!]
  OR: [EquipmentSubscriptionWhereInput!]
  NOT: [EquipmentSubscriptionWhereInput!]
}

input EquipmentUpdateInput {
  name: String
  code: String
  description: String
  equipmentProperties: EquipmentPropertyUpdateManyWithoutEquipmentInput
  equipmentClasses: EquipmentClassUpdateManyWithoutEquipmentsInput
  parent: EquipmentUpdateOneWithoutChildrenInput
  children: EquipmentUpdateManyWithoutParentInput
}

input EquipmentUpdateManyDataInput {
  name: String
  code: String
  description: String
}

input EquipmentUpdateManyMutationInput {
  name: String
  code: String
  description: String
}

input EquipmentUpdateManyWithoutEquipmentClassesInput {
  create: [EquipmentCreateWithoutEquipmentClassesInput!]
  delete: [EquipmentWhereUniqueInput!]
  connect: [EquipmentWhereUniqueInput!]
  set: [EquipmentWhereUniqueInput!]
  disconnect: [EquipmentWhereUniqueInput!]
  update: [EquipmentUpdateWithWhereUniqueWithoutEquipmentClassesInput!]
  upsert: [EquipmentUpsertWithWhereUniqueWithoutEquipmentClassesInput!]
  deleteMany: [EquipmentScalarWhereInput!]
  updateMany: [EquipmentUpdateManyWithWhereNestedInput!]
}

input EquipmentUpdateManyWithoutParentInput {
  create: [EquipmentCreateWithoutParentInput!]
  delete: [EquipmentWhereUniqueInput!]
  connect: [EquipmentWhereUniqueInput!]
  set: [EquipmentWhereUniqueInput!]
  disconnect: [EquipmentWhereUniqueInput!]
  update: [EquipmentUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [EquipmentUpsertWithWhereUniqueWithoutParentInput!]
  deleteMany: [EquipmentScalarWhereInput!]
  updateMany: [EquipmentUpdateManyWithWhereNestedInput!]
}

input EquipmentUpdateManyWithWhereNestedInput {
  where: EquipmentScalarWhereInput!
  data: EquipmentUpdateManyDataInput!
}

input EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput {
  create: EquipmentCreateWithoutEquipmentPropertiesInput
  update: EquipmentUpdateWithoutEquipmentPropertiesDataInput
  upsert: EquipmentUpsertWithoutEquipmentPropertiesInput
  connect: EquipmentWhereUniqueInput
}

input EquipmentUpdateOneWithoutChildrenInput {
  create: EquipmentCreateWithoutChildrenInput
  update: EquipmentUpdateWithoutChildrenDataInput
  upsert: EquipmentUpsertWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  connect: EquipmentWhereUniqueInput
}

input EquipmentUpdateWithoutChildrenDataInput {
  name: String
  code: String
  description: String
  equipmentProperties: EquipmentPropertyUpdateManyWithoutEquipmentInput
  equipmentClasses: EquipmentClassUpdateManyWithoutEquipmentsInput
  parent: EquipmentUpdateOneWithoutChildrenInput
}

input EquipmentUpdateWithoutEquipmentClassesDataInput {
  name: String
  code: String
  description: String
  equipmentProperties: EquipmentPropertyUpdateManyWithoutEquipmentInput
  parent: EquipmentUpdateOneWithoutChildrenInput
  children: EquipmentUpdateManyWithoutParentInput
}

input EquipmentUpdateWithoutEquipmentPropertiesDataInput {
  name: String
  code: String
  description: String
  equipmentClasses: EquipmentClassUpdateManyWithoutEquipmentsInput
  parent: EquipmentUpdateOneWithoutChildrenInput
  children: EquipmentUpdateManyWithoutParentInput
}

input EquipmentUpdateWithoutParentDataInput {
  name: String
  code: String
  description: String
  equipmentProperties: EquipmentPropertyUpdateManyWithoutEquipmentInput
  equipmentClasses: EquipmentClassUpdateManyWithoutEquipmentsInput
  children: EquipmentUpdateManyWithoutParentInput
}

input EquipmentUpdateWithWhereUniqueWithoutEquipmentClassesInput {
  where: EquipmentWhereUniqueInput!
  data: EquipmentUpdateWithoutEquipmentClassesDataInput!
}

input EquipmentUpdateWithWhereUniqueWithoutParentInput {
  where: EquipmentWhereUniqueInput!
  data: EquipmentUpdateWithoutParentDataInput!
}

input EquipmentUpsertWithoutChildrenInput {
  update: EquipmentUpdateWithoutChildrenDataInput!
  create: EquipmentCreateWithoutChildrenInput!
}

input EquipmentUpsertWithoutEquipmentPropertiesInput {
  update: EquipmentUpdateWithoutEquipmentPropertiesDataInput!
  create: EquipmentCreateWithoutEquipmentPropertiesInput!
}

input EquipmentUpsertWithWhereUniqueWithoutEquipmentClassesInput {
  where: EquipmentWhereUniqueInput!
  update: EquipmentUpdateWithoutEquipmentClassesDataInput!
  create: EquipmentCreateWithoutEquipmentClassesInput!
}

input EquipmentUpsertWithWhereUniqueWithoutParentInput {
  where: EquipmentWhereUniqueInput!
  update: EquipmentUpdateWithoutParentDataInput!
  create: EquipmentCreateWithoutParentInput!
}

input EquipmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  equipmentProperties_every: EquipmentPropertyWhereInput
  equipmentProperties_some: EquipmentPropertyWhereInput
  equipmentProperties_none: EquipmentPropertyWhereInput
  equipmentClasses_every: EquipmentClassWhereInput
  equipmentClasses_some: EquipmentClassWhereInput
  equipmentClasses_none: EquipmentClassWhereInput
  parent: EquipmentWhereInput
  children_every: EquipmentWhereInput
  children_some: EquipmentWhereInput
  children_none: EquipmentWhereInput
  AND: [EquipmentWhereInput!]
  OR: [EquipmentWhereInput!]
  NOT: [EquipmentWhereInput!]
}

input EquipmentWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEquipment(data: EquipmentCreateInput!): Equipment!
  updateEquipment(data: EquipmentUpdateInput!, where: EquipmentWhereUniqueInput!): Equipment
  updateManyEquipments(data: EquipmentUpdateManyMutationInput!, where: EquipmentWhereInput): BatchPayload!
  upsertEquipment(where: EquipmentWhereUniqueInput!, create: EquipmentCreateInput!, update: EquipmentUpdateInput!): Equipment!
  deleteEquipment(where: EquipmentWhereUniqueInput!): Equipment
  deleteManyEquipments(where: EquipmentWhereInput): BatchPayload!
  createEquipmentClass(data: EquipmentClassCreateInput!): EquipmentClass!
  updateEquipmentClass(data: EquipmentClassUpdateInput!, where: EquipmentClassWhereUniqueInput!): EquipmentClass
  updateManyEquipmentClasses(data: EquipmentClassUpdateManyMutationInput!, where: EquipmentClassWhereInput): BatchPayload!
  upsertEquipmentClass(where: EquipmentClassWhereUniqueInput!, create: EquipmentClassCreateInput!, update: EquipmentClassUpdateInput!): EquipmentClass!
  deleteEquipmentClass(where: EquipmentClassWhereUniqueInput!): EquipmentClass
  deleteManyEquipmentClasses(where: EquipmentClassWhereInput): BatchPayload!
  createEquipmentClassProperty(data: EquipmentClassPropertyCreateInput!): EquipmentClassProperty!
  updateEquipmentClassProperty(data: EquipmentClassPropertyUpdateInput!, where: EquipmentClassPropertyWhereUniqueInput!): EquipmentClassProperty
  updateManyEquipmentClassProperties(data: EquipmentClassPropertyUpdateManyMutationInput!, where: EquipmentClassPropertyWhereInput): BatchPayload!
  upsertEquipmentClassProperty(where: EquipmentClassPropertyWhereUniqueInput!, create: EquipmentClassPropertyCreateInput!, update: EquipmentClassPropertyUpdateInput!): EquipmentClassProperty!
  deleteEquipmentClassProperty(where: EquipmentClassPropertyWhereUniqueInput!): EquipmentClassProperty
  deleteManyEquipmentClassProperties(where: EquipmentClassPropertyWhereInput): BatchPayload!
  createEquipmentProperty(data: EquipmentPropertyCreateInput!): EquipmentProperty!
  updateEquipmentProperty(data: EquipmentPropertyUpdateInput!, where: EquipmentPropertyWhereUniqueInput!): EquipmentProperty
  updateManyEquipmentProperties(data: EquipmentPropertyUpdateManyMutationInput!, where: EquipmentPropertyWhereInput): BatchPayload!
  upsertEquipmentProperty(where: EquipmentPropertyWhereUniqueInput!, create: EquipmentPropertyCreateInput!, update: EquipmentPropertyUpdateInput!): EquipmentProperty!
  deleteEquipmentProperty(where: EquipmentPropertyWhereUniqueInput!): EquipmentProperty
  deleteManyEquipmentProperties(where: EquipmentPropertyWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  equipment(where: EquipmentWhereUniqueInput!): Equipment
  equipments(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Equipment]!
  equipmentsConnection(where: EquipmentWhereInput, orderBy: EquipmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EquipmentConnection!
  equipmentClass(where: EquipmentClassWhereUniqueInput!): EquipmentClass
  equipmentClasses(where: EquipmentClassWhereInput, orderBy: EquipmentClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EquipmentClass]!
  equipmentClassesConnection(where: EquipmentClassWhereInput, orderBy: EquipmentClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EquipmentClassConnection!
  equipmentClassProperty(where: EquipmentClassPropertyWhereUniqueInput!): EquipmentClassProperty
  equipmentClassProperties(where: EquipmentClassPropertyWhereInput, orderBy: EquipmentClassPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EquipmentClassProperty]!
  equipmentClassPropertiesConnection(where: EquipmentClassPropertyWhereInput, orderBy: EquipmentClassPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EquipmentClassPropertyConnection!
  equipmentProperty(where: EquipmentPropertyWhereUniqueInput!): EquipmentProperty
  equipmentProperties(where: EquipmentPropertyWhereInput, orderBy: EquipmentPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EquipmentProperty]!
  equipmentPropertiesConnection(where: EquipmentPropertyWhereInput, orderBy: EquipmentPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EquipmentPropertyConnection!
  node(id: ID!): Node
}

type Subscription {
  equipment(where: EquipmentSubscriptionWhereInput): EquipmentSubscriptionPayload
  equipmentClass(where: EquipmentClassSubscriptionWhereInput): EquipmentClassSubscriptionPayload
  equipmentClassProperty(where: EquipmentClassPropertySubscriptionWhereInput): EquipmentClassPropertySubscriptionPayload
  equipmentProperty(where: EquipmentPropertySubscriptionWhereInput): EquipmentPropertySubscriptionPayload
}
`