### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AggregateEquipment {
  count: Int!
}

type AggregateEquipmentClass {
  count: Int!
}

type AggregateEquipmentClassMapping {
  count: Int!
}

type AggregateEquipmentClassProperty {
  count: Int!
}

type AggregateEquipmentProperty {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Equipment {
  children(after: String, before: String, first: Int, last: Int, orderBy: EquipmentOrderByInput, skip: Int, where: EquipmentWhereInput): [Equipment!]
  code: String
  description: String
  equipmentClasses(after: String, before: String, first: Int, last: Int, orderBy: EquipmentClassOrderByInput, skip: Int, where: EquipmentClassWhereInput): [EquipmentClass!]
  equipmentProperties(after: String, before: String, first: Int, last: Int, orderBy: EquipmentPropertyOrderByInput, skip: Int, where: EquipmentPropertyWhereInput): [EquipmentProperty!]
  id: ID!
  name: String!
  parent: Equipment
}

type EquipmentClass {
  children(after: String, before: String, first: Int, last: Int, orderBy: EquipmentClassOrderByInput, skip: Int, where: EquipmentClassWhereInput): [EquipmentClass!]
  code: String
  description: String
  equipmentClassProperties(after: String, before: String, first: Int, last: Int, orderBy: EquipmentClassPropertyOrderByInput, skip: Int, where: EquipmentClassPropertyWhereInput): [EquipmentClassProperty!]
  equipments(after: String, before: String, first: Int, last: Int, orderBy: EquipmentOrderByInput, skip: Int, where: EquipmentWhereInput): [Equipment!]
  id: ID!
  name: String!
  parent: EquipmentClass
}

type EquipmentClassConnection {
  aggregate: AggregateEquipmentClass!
  edges: [EquipmentClassEdge!]!
  pageInfo: PageInfo!
}

input EquipmentClassCreateInput {
  children: EquipmentClassCreateManyWithoutParentInput
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyCreateManyWithoutEquipmentClassInput
  equipments: EquipmentCreateManyWithoutEquipmentClassesInput
  id: ID
  name: String!
  parent: EquipmentClassCreateOneWithoutChildrenInput
}

input EquipmentClassCreateManyWithoutEquipmentsInput {
  connect: [EquipmentClassWhereUniqueInput!]
  create: [EquipmentClassCreateWithoutEquipmentsInput!]
}

input EquipmentClassCreateManyWithoutParentInput {
  connect: [EquipmentClassWhereUniqueInput!]
  create: [EquipmentClassCreateWithoutParentInput!]
}

input EquipmentClassCreateOneInput {
  connect: EquipmentClassWhereUniqueInput
  create: EquipmentClassCreateInput
}

input EquipmentClassCreateOneWithoutChildrenInput {
  connect: EquipmentClassWhereUniqueInput
  create: EquipmentClassCreateWithoutChildrenInput
}

input EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput {
  connect: EquipmentClassWhereUniqueInput
  create: EquipmentClassCreateWithoutEquipmentClassPropertiesInput
}

input EquipmentClassCreateWithoutChildrenInput {
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyCreateManyWithoutEquipmentClassInput
  equipments: EquipmentCreateManyWithoutEquipmentClassesInput
  id: ID
  name: String!
  parent: EquipmentClassCreateOneWithoutChildrenInput
}

input EquipmentClassCreateWithoutEquipmentClassPropertiesInput {
  children: EquipmentClassCreateManyWithoutParentInput
  code: String
  description: String
  equipments: EquipmentCreateManyWithoutEquipmentClassesInput
  id: ID
  name: String!
  parent: EquipmentClassCreateOneWithoutChildrenInput
}

input EquipmentClassCreateWithoutEquipmentsInput {
  children: EquipmentClassCreateManyWithoutParentInput
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyCreateManyWithoutEquipmentClassInput
  id: ID
  name: String!
  parent: EquipmentClassCreateOneWithoutChildrenInput
}

input EquipmentClassCreateWithoutParentInput {
  children: EquipmentClassCreateManyWithoutParentInput
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyCreateManyWithoutEquipmentClassInput
  equipments: EquipmentCreateManyWithoutEquipmentClassesInput
  id: ID
  name: String!
}

type EquipmentClassEdge {
  cursor: String!
  node: EquipmentClass!
}

type EquipmentClassMapping {
  equipment: Equipment
  equipmentClass: EquipmentClass
}

type EquipmentClassMappingConnection {
  aggregate: AggregateEquipmentClassMapping!
  edges: [EquipmentClassMappingEdge!]!
  pageInfo: PageInfo!
}

input EquipmentClassMappingCreateInput {
  equipment: EquipmentCreateOneInput
  equipmentClass: EquipmentClassCreateOneInput
}

type EquipmentClassMappingEdge {
  cursor: String!
  node: EquipmentClassMapping!
}

enum EquipmentClassMappingOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input EquipmentClassMappingWhereInput {
  AND: [EquipmentClassMappingWhereInput!]
  equipment: EquipmentWhereInput
  equipmentClass: EquipmentClassWhereInput
  NOT: [EquipmentClassMappingWhereInput!]
  OR: [EquipmentClassMappingWhereInput!]
}

enum EquipmentClassOrderByInput {
  code_ASC
  code_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EquipmentClassPreviousValues {
  code: String
  description: String
  id: ID!
  name: String!
}

type EquipmentClassProperty {
  children(after: String, before: String, first: Int, last: Int, orderBy: EquipmentClassPropertyOrderByInput, skip: Int, where: EquipmentClassPropertyWhereInput): [EquipmentClassProperty!]
  code: String
  description: String
  equipmentClass: EquipmentClass!
  id: ID!
  name: String!
  parent: EquipmentClassProperty
}

type EquipmentClassPropertyConnection {
  aggregate: AggregateEquipmentClassProperty!
  edges: [EquipmentClassPropertyEdge!]!
  pageInfo: PageInfo!
}

input EquipmentClassPropertyCreateInput {
  children: EquipmentClassPropertyCreateManyWithoutParentInput
  code: String
  description: String
  equipmentClass: EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput!
  id: ID
  name: String!
  parent: EquipmentClassPropertyCreateOneWithoutChildrenInput
}

input EquipmentClassPropertyCreateManyWithoutEquipmentClassInput {
  connect: [EquipmentClassPropertyWhereUniqueInput!]
  create: [EquipmentClassPropertyCreateWithoutEquipmentClassInput!]
}

input EquipmentClassPropertyCreateManyWithoutParentInput {
  connect: [EquipmentClassPropertyWhereUniqueInput!]
  create: [EquipmentClassPropertyCreateWithoutParentInput!]
}

input EquipmentClassPropertyCreateOneWithoutChildrenInput {
  connect: EquipmentClassPropertyWhereUniqueInput
  create: EquipmentClassPropertyCreateWithoutChildrenInput
}

input EquipmentClassPropertyCreateWithoutChildrenInput {
  code: String
  description: String
  equipmentClass: EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput!
  id: ID
  name: String!
  parent: EquipmentClassPropertyCreateOneWithoutChildrenInput
}

input EquipmentClassPropertyCreateWithoutEquipmentClassInput {
  children: EquipmentClassPropertyCreateManyWithoutParentInput
  code: String
  description: String
  id: ID
  name: String!
  parent: EquipmentClassPropertyCreateOneWithoutChildrenInput
}

input EquipmentClassPropertyCreateWithoutParentInput {
  children: EquipmentClassPropertyCreateManyWithoutParentInput
  code: String
  description: String
  equipmentClass: EquipmentClassCreateOneWithoutEquipmentClassPropertiesInput!
  id: ID
  name: String!
}

type EquipmentClassPropertyEdge {
  cursor: String!
  node: EquipmentClassProperty!
}

enum EquipmentClassPropertyOrderByInput {
  code_ASC
  code_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input EquipmentClassPropertyScalarWhereInput {
  AND: [EquipmentClassPropertyScalarWhereInput!]
  code: String
  code_contains: String
  code_ends_with: String
  code_gt: String
  code_gte: String
  code_in: [String!]
  code_lt: String
  code_lte: String
  code_not: String
  code_not_contains: String
  code_not_ends_with: String
  code_not_in: [String!]
  code_not_starts_with: String
  code_starts_with: String
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EquipmentClassPropertyScalarWhereInput!]
  OR: [EquipmentClassPropertyScalarWhereInput!]
}

input EquipmentClassPropertyUpdateInput {
  children: EquipmentClassPropertyUpdateManyWithoutParentInput
  code: String
  description: String
  equipmentClass: EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput
  name: String
  parent: EquipmentClassPropertyUpdateOneWithoutChildrenInput
}

input EquipmentClassPropertyUpdateManyDataInput {
  code: String
  description: String
  name: String
}

input EquipmentClassPropertyUpdateManyMutationInput {
  code: String
  description: String
  name: String
}

input EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput {
  connect: [EquipmentClassPropertyWhereUniqueInput!]
  create: [EquipmentClassPropertyCreateWithoutEquipmentClassInput!]
  delete: [EquipmentClassPropertyWhereUniqueInput!]
  deleteMany: [EquipmentClassPropertyScalarWhereInput!]
  disconnect: [EquipmentClassPropertyWhereUniqueInput!]
  set: [EquipmentClassPropertyWhereUniqueInput!]
  update: [EquipmentClassPropertyUpdateWithWhereUniqueWithoutEquipmentClassInput!]
  updateMany: [EquipmentClassPropertyUpdateManyWithWhereNestedInput!]
  upsert: [EquipmentClassPropertyUpsertWithWhereUniqueWithoutEquipmentClassInput!]
}

input EquipmentClassPropertyUpdateManyWithoutParentInput {
  connect: [EquipmentClassPropertyWhereUniqueInput!]
  create: [EquipmentClassPropertyCreateWithoutParentInput!]
  delete: [EquipmentClassPropertyWhereUniqueInput!]
  deleteMany: [EquipmentClassPropertyScalarWhereInput!]
  disconnect: [EquipmentClassPropertyWhereUniqueInput!]
  set: [EquipmentClassPropertyWhereUniqueInput!]
  update: [EquipmentClassPropertyUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [EquipmentClassPropertyUpdateManyWithWhereNestedInput!]
  upsert: [EquipmentClassPropertyUpsertWithWhereUniqueWithoutParentInput!]
}

input EquipmentClassPropertyUpdateManyWithWhereNestedInput {
  data: EquipmentClassPropertyUpdateManyDataInput!
  where: EquipmentClassPropertyScalarWhereInput!
}

input EquipmentClassPropertyUpdateOneWithoutChildrenInput {
  connect: EquipmentClassPropertyWhereUniqueInput
  create: EquipmentClassPropertyCreateWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  update: EquipmentClassPropertyUpdateWithoutChildrenDataInput
  upsert: EquipmentClassPropertyUpsertWithoutChildrenInput
}

input EquipmentClassPropertyUpdateWithoutChildrenDataInput {
  code: String
  description: String
  equipmentClass: EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput
  name: String
  parent: EquipmentClassPropertyUpdateOneWithoutChildrenInput
}

input EquipmentClassPropertyUpdateWithoutEquipmentClassDataInput {
  children: EquipmentClassPropertyUpdateManyWithoutParentInput
  code: String
  description: String
  name: String
  parent: EquipmentClassPropertyUpdateOneWithoutChildrenInput
}

input EquipmentClassPropertyUpdateWithoutParentDataInput {
  children: EquipmentClassPropertyUpdateManyWithoutParentInput
  code: String
  description: String
  equipmentClass: EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput
  name: String
}

input EquipmentClassPropertyUpdateWithWhereUniqueWithoutEquipmentClassInput {
  data: EquipmentClassPropertyUpdateWithoutEquipmentClassDataInput!
  where: EquipmentClassPropertyWhereUniqueInput!
}

input EquipmentClassPropertyUpdateWithWhereUniqueWithoutParentInput {
  data: EquipmentClassPropertyUpdateWithoutParentDataInput!
  where: EquipmentClassPropertyWhereUniqueInput!
}

input EquipmentClassPropertyUpsertWithoutChildrenInput {
  create: EquipmentClassPropertyCreateWithoutChildrenInput!
  update: EquipmentClassPropertyUpdateWithoutChildrenDataInput!
}

input EquipmentClassPropertyUpsertWithWhereUniqueWithoutEquipmentClassInput {
  create: EquipmentClassPropertyCreateWithoutEquipmentClassInput!
  update: EquipmentClassPropertyUpdateWithoutEquipmentClassDataInput!
  where: EquipmentClassPropertyWhereUniqueInput!
}

input EquipmentClassPropertyUpsertWithWhereUniqueWithoutParentInput {
  create: EquipmentClassPropertyCreateWithoutParentInput!
  update: EquipmentClassPropertyUpdateWithoutParentDataInput!
  where: EquipmentClassPropertyWhereUniqueInput!
}

input EquipmentClassPropertyWhereInput {
  AND: [EquipmentClassPropertyWhereInput!]
  children_every: EquipmentClassPropertyWhereInput
  children_none: EquipmentClassPropertyWhereInput
  children_some: EquipmentClassPropertyWhereInput
  code: String
  code_contains: String
  code_ends_with: String
  code_gt: String
  code_gte: String
  code_in: [String!]
  code_lt: String
  code_lte: String
  code_not: String
  code_not_contains: String
  code_not_ends_with: String
  code_not_in: [String!]
  code_not_starts_with: String
  code_starts_with: String
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  equipmentClass: EquipmentClassWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EquipmentClassPropertyWhereInput!]
  OR: [EquipmentClassPropertyWhereInput!]
  parent: EquipmentClassPropertyWhereInput
}

input EquipmentClassPropertyWhereUniqueInput {
  id: ID
}

input EquipmentClassScalarWhereInput {
  AND: [EquipmentClassScalarWhereInput!]
  code: String
  code_contains: String
  code_ends_with: String
  code_gt: String
  code_gte: String
  code_in: [String!]
  code_lt: String
  code_lte: String
  code_not: String
  code_not_contains: String
  code_not_ends_with: String
  code_not_in: [String!]
  code_not_starts_with: String
  code_starts_with: String
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EquipmentClassScalarWhereInput!]
  OR: [EquipmentClassScalarWhereInput!]
}

type EquipmentClassSubscriptionPayload {
  mutation: MutationType!
  node: EquipmentClass
  previousValues: EquipmentClassPreviousValues
  updatedFields: [String!]
}

input EquipmentClassUpdateInput {
  children: EquipmentClassUpdateManyWithoutParentInput
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput
  equipments: EquipmentUpdateManyWithoutEquipmentClassesInput
  name: String
  parent: EquipmentClassUpdateOneWithoutChildrenInput
}

input EquipmentClassUpdateManyDataInput {
  code: String
  description: String
  name: String
}

input EquipmentClassUpdateManyMutationInput {
  code: String
  description: String
  name: String
}

input EquipmentClassUpdateManyWithoutEquipmentsInput {
  connect: [EquipmentClassWhereUniqueInput!]
  create: [EquipmentClassCreateWithoutEquipmentsInput!]
  delete: [EquipmentClassWhereUniqueInput!]
  deleteMany: [EquipmentClassScalarWhereInput!]
  disconnect: [EquipmentClassWhereUniqueInput!]
  set: [EquipmentClassWhereUniqueInput!]
  update: [EquipmentClassUpdateWithWhereUniqueWithoutEquipmentsInput!]
  updateMany: [EquipmentClassUpdateManyWithWhereNestedInput!]
  upsert: [EquipmentClassUpsertWithWhereUniqueWithoutEquipmentsInput!]
}

input EquipmentClassUpdateManyWithoutParentInput {
  connect: [EquipmentClassWhereUniqueInput!]
  create: [EquipmentClassCreateWithoutParentInput!]
  delete: [EquipmentClassWhereUniqueInput!]
  deleteMany: [EquipmentClassScalarWhereInput!]
  disconnect: [EquipmentClassWhereUniqueInput!]
  set: [EquipmentClassWhereUniqueInput!]
  update: [EquipmentClassUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [EquipmentClassUpdateManyWithWhereNestedInput!]
  upsert: [EquipmentClassUpsertWithWhereUniqueWithoutParentInput!]
}

input EquipmentClassUpdateManyWithWhereNestedInput {
  data: EquipmentClassUpdateManyDataInput!
  where: EquipmentClassScalarWhereInput!
}

input EquipmentClassUpdateOneRequiredWithoutEquipmentClassPropertiesInput {
  connect: EquipmentClassWhereUniqueInput
  create: EquipmentClassCreateWithoutEquipmentClassPropertiesInput
  update: EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInput
  upsert: EquipmentClassUpsertWithoutEquipmentClassPropertiesInput
}

input EquipmentClassUpdateOneWithoutChildrenInput {
  connect: EquipmentClassWhereUniqueInput
  create: EquipmentClassCreateWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  update: EquipmentClassUpdateWithoutChildrenDataInput
  upsert: EquipmentClassUpsertWithoutChildrenInput
}

input EquipmentClassUpdateWithoutChildrenDataInput {
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput
  equipments: EquipmentUpdateManyWithoutEquipmentClassesInput
  name: String
  parent: EquipmentClassUpdateOneWithoutChildrenInput
}

input EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInput {
  children: EquipmentClassUpdateManyWithoutParentInput
  code: String
  description: String
  equipments: EquipmentUpdateManyWithoutEquipmentClassesInput
  name: String
  parent: EquipmentClassUpdateOneWithoutChildrenInput
}

input EquipmentClassUpdateWithoutEquipmentsDataInput {
  children: EquipmentClassUpdateManyWithoutParentInput
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput
  name: String
  parent: EquipmentClassUpdateOneWithoutChildrenInput
}

input EquipmentClassUpdateWithoutParentDataInput {
  children: EquipmentClassUpdateManyWithoutParentInput
  code: String
  description: String
  equipmentClassProperties: EquipmentClassPropertyUpdateManyWithoutEquipmentClassInput
  equipments: EquipmentUpdateManyWithoutEquipmentClassesInput
  name: String
}

input EquipmentClassUpdateWithWhereUniqueWithoutEquipmentsInput {
  data: EquipmentClassUpdateWithoutEquipmentsDataInput!
  where: EquipmentClassWhereUniqueInput!
}

input EquipmentClassUpdateWithWhereUniqueWithoutParentInput {
  data: EquipmentClassUpdateWithoutParentDataInput!
  where: EquipmentClassWhereUniqueInput!
}

input EquipmentClassUpsertWithoutChildrenInput {
  create: EquipmentClassCreateWithoutChildrenInput!
  update: EquipmentClassUpdateWithoutChildrenDataInput!
}

input EquipmentClassUpsertWithoutEquipmentClassPropertiesInput {
  create: EquipmentClassCreateWithoutEquipmentClassPropertiesInput!
  update: EquipmentClassUpdateWithoutEquipmentClassPropertiesDataInput!
}

input EquipmentClassUpsertWithWhereUniqueWithoutEquipmentsInput {
  create: EquipmentClassCreateWithoutEquipmentsInput!
  update: EquipmentClassUpdateWithoutEquipmentsDataInput!
  where: EquipmentClassWhereUniqueInput!
}

input EquipmentClassUpsertWithWhereUniqueWithoutParentInput {
  create: EquipmentClassCreateWithoutParentInput!
  update: EquipmentClassUpdateWithoutParentDataInput!
  where: EquipmentClassWhereUniqueInput!
}

input EquipmentClassWhereInput {
  AND: [EquipmentClassWhereInput!]
  children_every: EquipmentClassWhereInput
  children_none: EquipmentClassWhereInput
  children_some: EquipmentClassWhereInput
  code: String
  code_contains: String
  code_ends_with: String
  code_gt: String
  code_gte: String
  code_in: [String!]
  code_lt: String
  code_lte: String
  code_not: String
  code_not_contains: String
  code_not_ends_with: String
  code_not_in: [String!]
  code_not_starts_with: String
  code_starts_with: String
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  equipmentClassProperties_every: EquipmentClassPropertyWhereInput
  equipmentClassProperties_none: EquipmentClassPropertyWhereInput
  equipmentClassProperties_some: EquipmentClassPropertyWhereInput
  equipments_every: EquipmentWhereInput
  equipments_none: EquipmentWhereInput
  equipments_some: EquipmentWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EquipmentClassWhereInput!]
  OR: [EquipmentClassWhereInput!]
  parent: EquipmentClassWhereInput
}

input EquipmentClassWhereUniqueInput {
  id: ID
}

type EquipmentConnection {
  aggregate: AggregateEquipment!
  edges: [EquipmentEdge!]!
  pageInfo: PageInfo!
}

input EquipmentCreateInput {
  children: EquipmentCreateManyWithoutParentInput
  code: String
  description: String
  equipmentClasses: EquipmentClassCreateManyWithoutEquipmentsInput
  equipmentProperties: EquipmentPropertyCreateManyWithoutEquipmentInput
  id: ID
  name: String!
  parent: EquipmentCreateOneWithoutChildrenInput
}

input EquipmentCreateManyWithoutEquipmentClassesInput {
  connect: [EquipmentWhereUniqueInput!]
  create: [EquipmentCreateWithoutEquipmentClassesInput!]
}

input EquipmentCreateManyWithoutParentInput {
  connect: [EquipmentWhereUniqueInput!]
  create: [EquipmentCreateWithoutParentInput!]
}

input EquipmentCreateOneInput {
  connect: EquipmentWhereUniqueInput
  create: EquipmentCreateInput
}

input EquipmentCreateOneWithoutChildrenInput {
  connect: EquipmentWhereUniqueInput
  create: EquipmentCreateWithoutChildrenInput
}

input EquipmentCreateOneWithoutEquipmentPropertiesInput {
  connect: EquipmentWhereUniqueInput
  create: EquipmentCreateWithoutEquipmentPropertiesInput
}

input EquipmentCreateWithoutChildrenInput {
  code: String
  description: String
  equipmentClasses: EquipmentClassCreateManyWithoutEquipmentsInput
  equipmentProperties: EquipmentPropertyCreateManyWithoutEquipmentInput
  id: ID
  name: String!
  parent: EquipmentCreateOneWithoutChildrenInput
}

input EquipmentCreateWithoutEquipmentClassesInput {
  children: EquipmentCreateManyWithoutParentInput
  code: String
  description: String
  equipmentProperties: EquipmentPropertyCreateManyWithoutEquipmentInput
  id: ID
  name: String!
  parent: EquipmentCreateOneWithoutChildrenInput
}

input EquipmentCreateWithoutEquipmentPropertiesInput {
  children: EquipmentCreateManyWithoutParentInput
  code: String
  description: String
  equipmentClasses: EquipmentClassCreateManyWithoutEquipmentsInput
  id: ID
  name: String!
  parent: EquipmentCreateOneWithoutChildrenInput
}

input EquipmentCreateWithoutParentInput {
  children: EquipmentCreateManyWithoutParentInput
  code: String
  description: String
  equipmentClasses: EquipmentClassCreateManyWithoutEquipmentsInput
  equipmentProperties: EquipmentPropertyCreateManyWithoutEquipmentInput
  id: ID
  name: String!
}

type EquipmentEdge {
  cursor: String!
  node: Equipment!
}

enum EquipmentOrderByInput {
  code_ASC
  code_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EquipmentPreviousValues {
  code: String
  description: String
  id: ID!
  name: String!
}

type EquipmentProperty {
  children(after: String, before: String, first: Int, last: Int, orderBy: EquipmentPropertyOrderByInput, skip: Int, where: EquipmentPropertyWhereInput): [EquipmentProperty!]
  code: String
  description: String
  equipment: Equipment!
  id: ID!
  name: String!
  parent: EquipmentProperty
}

type EquipmentPropertyConnection {
  aggregate: AggregateEquipmentProperty!
  edges: [EquipmentPropertyEdge!]!
  pageInfo: PageInfo!
}

input EquipmentPropertyCreateInput {
  children: EquipmentPropertyCreateManyWithoutParentInput
  code: String
  description: String
  equipment: EquipmentCreateOneWithoutEquipmentPropertiesInput!
  id: ID
  name: String!
  parent: EquipmentPropertyCreateOneWithoutChildrenInput
}

input EquipmentPropertyCreateManyWithoutEquipmentInput {
  connect: [EquipmentPropertyWhereUniqueInput!]
  create: [EquipmentPropertyCreateWithoutEquipmentInput!]
}

input EquipmentPropertyCreateManyWithoutParentInput {
  connect: [EquipmentPropertyWhereUniqueInput!]
  create: [EquipmentPropertyCreateWithoutParentInput!]
}

input EquipmentPropertyCreateOneWithoutChildrenInput {
  connect: EquipmentPropertyWhereUniqueInput
  create: EquipmentPropertyCreateWithoutChildrenInput
}

input EquipmentPropertyCreateWithoutChildrenInput {
  code: String
  description: String
  equipment: EquipmentCreateOneWithoutEquipmentPropertiesInput!
  id: ID
  name: String!
  parent: EquipmentPropertyCreateOneWithoutChildrenInput
}

input EquipmentPropertyCreateWithoutEquipmentInput {
  children: EquipmentPropertyCreateManyWithoutParentInput
  code: String
  description: String
  id: ID
  name: String!
  parent: EquipmentPropertyCreateOneWithoutChildrenInput
}

input EquipmentPropertyCreateWithoutParentInput {
  children: EquipmentPropertyCreateManyWithoutParentInput
  code: String
  description: String
  equipment: EquipmentCreateOneWithoutEquipmentPropertiesInput!
  id: ID
  name: String!
}

type EquipmentPropertyEdge {
  cursor: String!
  node: EquipmentProperty!
}

enum EquipmentPropertyOrderByInput {
  code_ASC
  code_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input EquipmentPropertyScalarWhereInput {
  AND: [EquipmentPropertyScalarWhereInput!]
  code: String
  code_contains: String
  code_ends_with: String
  code_gt: String
  code_gte: String
  code_in: [String!]
  code_lt: String
  code_lte: String
  code_not: String
  code_not_contains: String
  code_not_ends_with: String
  code_not_in: [String!]
  code_not_starts_with: String
  code_starts_with: String
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EquipmentPropertyScalarWhereInput!]
  OR: [EquipmentPropertyScalarWhereInput!]
}

input EquipmentPropertyUpdateInput {
  children: EquipmentPropertyUpdateManyWithoutParentInput
  code: String
  description: String
  equipment: EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput
  name: String
  parent: EquipmentPropertyUpdateOneWithoutChildrenInput
}

input EquipmentPropertyUpdateManyDataInput {
  code: String
  description: String
  name: String
}

input EquipmentPropertyUpdateManyMutationInput {
  code: String
  description: String
  name: String
}

input EquipmentPropertyUpdateManyWithoutEquipmentInput {
  connect: [EquipmentPropertyWhereUniqueInput!]
  create: [EquipmentPropertyCreateWithoutEquipmentInput!]
  delete: [EquipmentPropertyWhereUniqueInput!]
  deleteMany: [EquipmentPropertyScalarWhereInput!]
  disconnect: [EquipmentPropertyWhereUniqueInput!]
  set: [EquipmentPropertyWhereUniqueInput!]
  update: [EquipmentPropertyUpdateWithWhereUniqueWithoutEquipmentInput!]
  updateMany: [EquipmentPropertyUpdateManyWithWhereNestedInput!]
  upsert: [EquipmentPropertyUpsertWithWhereUniqueWithoutEquipmentInput!]
}

input EquipmentPropertyUpdateManyWithoutParentInput {
  connect: [EquipmentPropertyWhereUniqueInput!]
  create: [EquipmentPropertyCreateWithoutParentInput!]
  delete: [EquipmentPropertyWhereUniqueInput!]
  deleteMany: [EquipmentPropertyScalarWhereInput!]
  disconnect: [EquipmentPropertyWhereUniqueInput!]
  set: [EquipmentPropertyWhereUniqueInput!]
  update: [EquipmentPropertyUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [EquipmentPropertyUpdateManyWithWhereNestedInput!]
  upsert: [EquipmentPropertyUpsertWithWhereUniqueWithoutParentInput!]
}

input EquipmentPropertyUpdateManyWithWhereNestedInput {
  data: EquipmentPropertyUpdateManyDataInput!
  where: EquipmentPropertyScalarWhereInput!
}

input EquipmentPropertyUpdateOneWithoutChildrenInput {
  connect: EquipmentPropertyWhereUniqueInput
  create: EquipmentPropertyCreateWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  update: EquipmentPropertyUpdateWithoutChildrenDataInput
  upsert: EquipmentPropertyUpsertWithoutChildrenInput
}

input EquipmentPropertyUpdateWithoutChildrenDataInput {
  code: String
  description: String
  equipment: EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput
  name: String
  parent: EquipmentPropertyUpdateOneWithoutChildrenInput
}

input EquipmentPropertyUpdateWithoutEquipmentDataInput {
  children: EquipmentPropertyUpdateManyWithoutParentInput
  code: String
  description: String
  name: String
  parent: EquipmentPropertyUpdateOneWithoutChildrenInput
}

input EquipmentPropertyUpdateWithoutParentDataInput {
  children: EquipmentPropertyUpdateManyWithoutParentInput
  code: String
  description: String
  equipment: EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput
  name: String
}

input EquipmentPropertyUpdateWithWhereUniqueWithoutEquipmentInput {
  data: EquipmentPropertyUpdateWithoutEquipmentDataInput!
  where: EquipmentPropertyWhereUniqueInput!
}

input EquipmentPropertyUpdateWithWhereUniqueWithoutParentInput {
  data: EquipmentPropertyUpdateWithoutParentDataInput!
  where: EquipmentPropertyWhereUniqueInput!
}

input EquipmentPropertyUpsertWithoutChildrenInput {
  create: EquipmentPropertyCreateWithoutChildrenInput!
  update: EquipmentPropertyUpdateWithoutChildrenDataInput!
}

input EquipmentPropertyUpsertWithWhereUniqueWithoutEquipmentInput {
  create: EquipmentPropertyCreateWithoutEquipmentInput!
  update: EquipmentPropertyUpdateWithoutEquipmentDataInput!
  where: EquipmentPropertyWhereUniqueInput!
}

input EquipmentPropertyUpsertWithWhereUniqueWithoutParentInput {
  create: EquipmentPropertyCreateWithoutParentInput!
  update: EquipmentPropertyUpdateWithoutParentDataInput!
  where: EquipmentPropertyWhereUniqueInput!
}

input EquipmentPropertyWhereInput {
  AND: [EquipmentPropertyWhereInput!]
  children_every: EquipmentPropertyWhereInput
  children_none: EquipmentPropertyWhereInput
  children_some: EquipmentPropertyWhereInput
  code: String
  code_contains: String
  code_ends_with: String
  code_gt: String
  code_gte: String
  code_in: [String!]
  code_lt: String
  code_lte: String
  code_not: String
  code_not_contains: String
  code_not_ends_with: String
  code_not_in: [String!]
  code_not_starts_with: String
  code_starts_with: String
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  equipment: EquipmentWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EquipmentPropertyWhereInput!]
  OR: [EquipmentPropertyWhereInput!]
  parent: EquipmentPropertyWhereInput
}

input EquipmentPropertyWhereUniqueInput {
  id: ID
}

input EquipmentScalarWhereInput {
  AND: [EquipmentScalarWhereInput!]
  code: String
  code_contains: String
  code_ends_with: String
  code_gt: String
  code_gte: String
  code_in: [String!]
  code_lt: String
  code_lte: String
  code_not: String
  code_not_contains: String
  code_not_ends_with: String
  code_not_in: [String!]
  code_not_starts_with: String
  code_starts_with: String
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EquipmentScalarWhereInput!]
  OR: [EquipmentScalarWhereInput!]
}

type EquipmentSubscriptionPayload {
  mutation: MutationType!
  node: Equipment
  previousValues: EquipmentPreviousValues
  updatedFields: [String!]
}

input EquipmentUpdateInput {
  children: EquipmentUpdateManyWithoutParentInput
  code: String
  description: String
  equipmentClasses: EquipmentClassUpdateManyWithoutEquipmentsInput
  equipmentProperties: EquipmentPropertyUpdateManyWithoutEquipmentInput
  name: String
  parent: EquipmentUpdateOneWithoutChildrenInput
}

input EquipmentUpdateManyDataInput {
  code: String
  description: String
  name: String
}

input EquipmentUpdateManyMutationInput {
  code: String
  description: String
  name: String
}

input EquipmentUpdateManyWithoutEquipmentClassesInput {
  connect: [EquipmentWhereUniqueInput!]
  create: [EquipmentCreateWithoutEquipmentClassesInput!]
  delete: [EquipmentWhereUniqueInput!]
  deleteMany: [EquipmentScalarWhereInput!]
  disconnect: [EquipmentWhereUniqueInput!]
  set: [EquipmentWhereUniqueInput!]
  update: [EquipmentUpdateWithWhereUniqueWithoutEquipmentClassesInput!]
  updateMany: [EquipmentUpdateManyWithWhereNestedInput!]
  upsert: [EquipmentUpsertWithWhereUniqueWithoutEquipmentClassesInput!]
}

input EquipmentUpdateManyWithoutParentInput {
  connect: [EquipmentWhereUniqueInput!]
  create: [EquipmentCreateWithoutParentInput!]
  delete: [EquipmentWhereUniqueInput!]
  deleteMany: [EquipmentScalarWhereInput!]
  disconnect: [EquipmentWhereUniqueInput!]
  set: [EquipmentWhereUniqueInput!]
  update: [EquipmentUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [EquipmentUpdateManyWithWhereNestedInput!]
  upsert: [EquipmentUpsertWithWhereUniqueWithoutParentInput!]
}

input EquipmentUpdateManyWithWhereNestedInput {
  data: EquipmentUpdateManyDataInput!
  where: EquipmentScalarWhereInput!
}

input EquipmentUpdateOneRequiredWithoutEquipmentPropertiesInput {
  connect: EquipmentWhereUniqueInput
  create: EquipmentCreateWithoutEquipmentPropertiesInput
  update: EquipmentUpdateWithoutEquipmentPropertiesDataInput
  upsert: EquipmentUpsertWithoutEquipmentPropertiesInput
}

input EquipmentUpdateOneWithoutChildrenInput {
  connect: EquipmentWhereUniqueInput
  create: EquipmentCreateWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  update: EquipmentUpdateWithoutChildrenDataInput
  upsert: EquipmentUpsertWithoutChildrenInput
}

input EquipmentUpdateWithoutChildrenDataInput {
  code: String
  description: String
  equipmentClasses: EquipmentClassUpdateManyWithoutEquipmentsInput
  equipmentProperties: EquipmentPropertyUpdateManyWithoutEquipmentInput
  name: String
  parent: EquipmentUpdateOneWithoutChildrenInput
}

input EquipmentUpdateWithoutEquipmentClassesDataInput {
  children: EquipmentUpdateManyWithoutParentInput
  code: String
  description: String
  equipmentProperties: EquipmentPropertyUpdateManyWithoutEquipmentInput
  name: String
  parent: EquipmentUpdateOneWithoutChildrenInput
}

input EquipmentUpdateWithoutEquipmentPropertiesDataInput {
  children: EquipmentUpdateManyWithoutParentInput
  code: String
  description: String
  equipmentClasses: EquipmentClassUpdateManyWithoutEquipmentsInput
  name: String
  parent: EquipmentUpdateOneWithoutChildrenInput
}

input EquipmentUpdateWithoutParentDataInput {
  children: EquipmentUpdateManyWithoutParentInput
  code: String
  description: String
  equipmentClasses: EquipmentClassUpdateManyWithoutEquipmentsInput
  equipmentProperties: EquipmentPropertyUpdateManyWithoutEquipmentInput
  name: String
}

input EquipmentUpdateWithWhereUniqueWithoutEquipmentClassesInput {
  data: EquipmentUpdateWithoutEquipmentClassesDataInput!
  where: EquipmentWhereUniqueInput!
}

input EquipmentUpdateWithWhereUniqueWithoutParentInput {
  data: EquipmentUpdateWithoutParentDataInput!
  where: EquipmentWhereUniqueInput!
}

input EquipmentUpsertWithoutChildrenInput {
  create: EquipmentCreateWithoutChildrenInput!
  update: EquipmentUpdateWithoutChildrenDataInput!
}

input EquipmentUpsertWithoutEquipmentPropertiesInput {
  create: EquipmentCreateWithoutEquipmentPropertiesInput!
  update: EquipmentUpdateWithoutEquipmentPropertiesDataInput!
}

input EquipmentUpsertWithWhereUniqueWithoutEquipmentClassesInput {
  create: EquipmentCreateWithoutEquipmentClassesInput!
  update: EquipmentUpdateWithoutEquipmentClassesDataInput!
  where: EquipmentWhereUniqueInput!
}

input EquipmentUpsertWithWhereUniqueWithoutParentInput {
  create: EquipmentCreateWithoutParentInput!
  update: EquipmentUpdateWithoutParentDataInput!
  where: EquipmentWhereUniqueInput!
}

input EquipmentWhereInput {
  AND: [EquipmentWhereInput!]
  children_every: EquipmentWhereInput
  children_none: EquipmentWhereInput
  children_some: EquipmentWhereInput
  code: String
  code_contains: String
  code_ends_with: String
  code_gt: String
  code_gte: String
  code_in: [String!]
  code_lt: String
  code_lte: String
  code_not: String
  code_not_contains: String
  code_not_ends_with: String
  code_not_in: [String!]
  code_not_starts_with: String
  code_starts_with: String
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  equipmentClasses_every: EquipmentClassWhereInput
  equipmentClasses_none: EquipmentClassWhereInput
  equipmentClasses_some: EquipmentClassWhereInput
  equipmentProperties_every: EquipmentPropertyWhereInput
  equipmentProperties_none: EquipmentPropertyWhereInput
  equipmentProperties_some: EquipmentPropertyWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [EquipmentWhereInput!]
  OR: [EquipmentWhereInput!]
  parent: EquipmentWhereInput
}

input EquipmentWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createEquipment(data: EquipmentCreateInput!): Equipment!
  createEquipmentClass(data: EquipmentClassCreateInput!): EquipmentClass!
  createEquipmentClassMapping(data: EquipmentClassMappingCreateInput!): EquipmentClassMapping!
  createEquipmentClassProperty(data: EquipmentClassPropertyCreateInput!): EquipmentClassProperty!
  createEquipmentProperty(data: EquipmentPropertyCreateInput!): EquipmentProperty!
  createSensor(code: String, name: String): Sensor!
  createSensorWithClass(classCode: String, className: String, code: String, name: String): Sensor!
  deleteEquipment(where: EquipmentWhereUniqueInput!): Equipment
  deleteEquipmentClass(where: EquipmentClassWhereUniqueInput!): EquipmentClass
  deleteEquipmentClassProperty(where: EquipmentClassPropertyWhereUniqueInput!): EquipmentClassProperty
  deleteEquipmentProperty(where: EquipmentPropertyWhereUniqueInput!): EquipmentProperty
  deleteManyEquipmentClasses(where: EquipmentClassWhereInput): BatchPayload!
  deleteManyEquipmentClassMappings(where: EquipmentClassMappingWhereInput): BatchPayload!
  deleteManyEquipmentClassProperties(where: EquipmentClassPropertyWhereInput): BatchPayload!
  deleteManyEquipmentProperties(where: EquipmentPropertyWhereInput): BatchPayload!
  deleteManyEquipments(where: EquipmentWhereInput): BatchPayload!
  deleteSensor(id: String): Sensor!
  updateEquipment(data: EquipmentUpdateInput!, where: EquipmentWhereUniqueInput!): Equipment
  updateEquipmentClass(data: EquipmentClassUpdateInput!, where: EquipmentClassWhereUniqueInput!): EquipmentClass
  updateEquipmentClassProperty(data: EquipmentClassPropertyUpdateInput!, where: EquipmentClassPropertyWhereUniqueInput!): EquipmentClassProperty
  updateEquipmentProperty(data: EquipmentPropertyUpdateInput!, where: EquipmentPropertyWhereUniqueInput!): EquipmentProperty
  updateManyEquipmentClasses(data: EquipmentClassUpdateManyMutationInput!, where: EquipmentClassWhereInput): BatchPayload!
  updateManyEquipmentClassProperties(data: EquipmentClassPropertyUpdateManyMutationInput!, where: EquipmentClassPropertyWhereInput): BatchPayload!
  updateManyEquipmentProperties(data: EquipmentPropertyUpdateManyMutationInput!, where: EquipmentPropertyWhereInput): BatchPayload!
  updateManyEquipments(data: EquipmentUpdateManyMutationInput!, where: EquipmentWhereInput): BatchPayload!
  updateSensor(code: String, id: String, name: String): Sensor!
  upsertEquipment(create: EquipmentCreateInput!, update: EquipmentUpdateInput!, where: EquipmentWhereUniqueInput!): Equipment!
  upsertEquipmentClass(create: EquipmentClassCreateInput!, update: EquipmentClassUpdateInput!, where: EquipmentClassWhereUniqueInput!): EquipmentClass!
  upsertEquipmentClassProperty(create: EquipmentClassPropertyCreateInput!, update: EquipmentClassPropertyUpdateInput!, where: EquipmentClassPropertyWhereUniqueInput!): EquipmentClassProperty!
  upsertEquipmentProperty(create: EquipmentPropertyCreateInput!, update: EquipmentPropertyUpdateInput!, where: EquipmentPropertyWhereUniqueInput!): EquipmentProperty!
}

enum MutationType {
  CREATED
  DELETED
  UPDATED
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  equipment(where: EquipmentWhereUniqueInput!): Equipment
  equipmentClass(where: EquipmentClassWhereUniqueInput!): EquipmentClass
  equipmentClasses(after: String, before: String, first: Int, last: Int, orderBy: EquipmentClassOrderByInput, skip: Int, where: EquipmentClassWhereInput): [EquipmentClass!]!
  equipmentClassesConnection(after: String, before: String, first: Int, last: Int, orderBy: EquipmentClassOrderByInput, skip: Int, where: EquipmentClassWhereInput): EquipmentClassConnection!
  equipmentClassMappings(after: String, before: String, first: Int, last: Int, orderBy: EquipmentClassMappingOrderByInput, skip: Int, where: EquipmentClassMappingWhereInput): [EquipmentClassMapping!]!
  equipmentClassMappingsConnection(after: String, before: String, first: Int, last: Int, orderBy: EquipmentClassMappingOrderByInput, skip: Int, where: EquipmentClassMappingWhereInput): EquipmentClassMappingConnection!
  equipmentClassProperties(after: String, before: String, first: Int, last: Int, orderBy: EquipmentClassPropertyOrderByInput, skip: Int, where: EquipmentClassPropertyWhereInput): [EquipmentClassProperty!]!
  equipmentClassPropertiesConnection(after: String, before: String, first: Int, last: Int, orderBy: EquipmentClassPropertyOrderByInput, skip: Int, where: EquipmentClassPropertyWhereInput): EquipmentClassPropertyConnection!
  equipmentClassProperty(where: EquipmentClassPropertyWhereUniqueInput!): EquipmentClassProperty
  equipmentProperties(after: String, before: String, first: Int, last: Int, orderBy: EquipmentPropertyOrderByInput, skip: Int, where: EquipmentPropertyWhereInput): [EquipmentProperty!]!
  equipmentPropertiesConnection(after: String, before: String, first: Int, last: Int, orderBy: EquipmentPropertyOrderByInput, skip: Int, where: EquipmentPropertyWhereInput): EquipmentPropertyConnection!
  equipmentProperty(where: EquipmentPropertyWhereUniqueInput!): EquipmentProperty
  equipments(after: String, before: String, first: Int, last: Int, orderBy: EquipmentOrderByInput, skip: Int, where: EquipmentWhereInput): [Equipment!]!
  equipmentsConnection(after: String, before: String, first: Int, last: Int, orderBy: EquipmentOrderByInput, skip: Int, where: EquipmentWhereInput): EquipmentConnection!
  sensors: [Sensor!]!
}

type Sensor {
  children: [Equipment!]!
  code: String!
  equipmentClasses: [EquipmentClass!]!
  equipmentProperties: [EquipmentProperty!]!
  flow: Int!
  id: ID!
  name: String!
}

type Subscription {
  equipment: EquipmentSubscriptionPayload!
  equipmentClass: EquipmentClassSubscriptionPayload!
}
